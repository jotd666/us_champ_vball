from PIL import Image,ImageOps
import os,sys,bitplanelib,subprocess,json,pathlib

this_dir = pathlib.Path(__file__).absolute().parent

data_dir = this_dir / ".." / ".." / "data"
src_dir = this_dir / ".." / ".." / "src" / "amiga"
gen_dir = src_dir / "gen"


sheets_path = this_dir / ".." / "sheets"
dump_dir = this_dir / "dumps"

used_sprite_cluts_file = this_dir / "used_sprite_cluts.json"
used_tile_cluts_file = this_dir / "used_tile_cluts.json"
used_graphics_dir = this_dir / "used_graphics"

NB_SPRITES = 0x800
NB_TILES = 0x4000

gen_dir.mkdir(exist_ok=True)


decl_ptr = "\tdc.l\t"
decl_word = "\tdc.w\t"

def palette_pad(palette,pad_nb):
    palette += (pad_nb-len(palette)) * [(0x10,0x20,0x30)]

def ensure_empty(d):
    if os.path.exists(d):
        for f in os.listdir(d):
            x = os.path.join(d,f)
            if os.path.isfile(x):
                os.remove(x)
    else:
        os.makedirs(d)

def ensure_exists(d):
    if os.path.exists(d):
        pass
    else:
        os.makedirs(d)

sr2 = lambda a,b : set(range(a,b,2))
# each entry associates to entry+4
sr4i = lambda a,b : set(range(a,b,8)) | set(range(a+2,b+2,8))

def get_non_mirrored_sprites():
    # referee, pwunboom, zap, ... "P", "L"..., score red dots, net, "OK" bubble, "1P"..."CPU"
    # => move in a subdir to extract!!!
    return {}
def get_hidden_sprites():
    # sprites that were added in US version to hide some potential trademark violations
    # those are static and eat blitter bandwidth so they have to go
    return {
        0x481,0x482,0x483,0x484,0x485,0X486,0X4Fc,0x4FD,0x4FE,0X4FF,0x487,  # New York stupid "GOOD MONING" signs and more...
        0x7D8,0x7D9,0x7DA,0x7DB,0x22A,0x22B,0x22C,0x228,0x229,              # L.A. hiding stuff for background
}
def get_sprite_groups():
    rval = {0x3F0:0x3F6,0x428:0x42C,0x338:0x33C,0x3F2:0x3F8,0X128:0x12E,0X52:0x58,0x50:0x56,0x10C:0x112,
    0X100:0x106,0X10A:0x110,0x102:0x108,0x11C:0x11C+6,0x11E:0x11E+6,0x126:0x126+6}
    # paired with +1
    for s in [0x42E,0X36A,0x37A,0x2B0,0X322,0x30A,0x31C,0x3F4,0xD8,0x25C,0x424,0xD2,0x5D0,0x49A,0x49C,0x4AE,0x664,0x646,0x5D8,0x4FA,0X4A2,0x4AC,0X2F7,0x2F9,0x2FB,0xF0,0x28E,0x304,0x54,0X408,0x412,0X358,0x7CC,0x7CE,0X10E,0x120,0X104,0x4B8,0x22E,0x5C0,0X64C,0x638,0X652,0x658,0X744,0X746,0X748,0xE4,0xEA,0xB4,0x556,0X65E,0X59A,0x5B6,0x5A4,0XDE,0X5E8,0x57D,0x5dc,0x6da,0x76a,0x524,0x26,0x21A,0x21C,0x12A,0x5E0]:
        rval[s] = s+1
    # paired with +2
    for s in [0x376,0x318,0x312,0X1EE,0x324,0X30C,0x32A,0x7C2,0X2C2,0x2C6,0x2B6,0x2BA,0X306,0X7BA,0x2CE,0x520,0x490,0x494,0x66C,
    0x48C,0X90,0x642,0x666,0X20A,0x660,0X210,0x80,0x84,0x8C,0X5E2,0x5CC,0x5D2,0x4B0,
    0x4B4,0X4A4,0x4A8,0x300,0x296,0X7D5,0x60,0X2CA,0x2D2,0X7D4,0x182,0x17C,0x7C8,0x7D0,0x7D1,0X2AC,0X17A,0x79E,0X7A2,
    0X18A,0x648,0X478,0X222,0x223,0X22,0x738,0X73C,0x18E,0x64E,0x654,0X740,0X634,0x582,0X474,0X65A,0x58A,0x5EF,0x5EE,
    0X46B,0x655,0X65B,0X465,0x466,0X470,0x471,0x74C,0x735,0X217,0X187,0X58d,0X216,0x5dd,
    0x47c,0x46A,0x186,0x734,0x5DC,0x5EA,0x5EB]:
        rval[s] = s+2
    # paired with +4 (not the most interesting work to do... identify pairs manually...)
    for s in [0x9C,0x9E,0X286,0X370,0x3BB,0X2A4,0X33A,0x41E,0x348,0X145,0X6A5,0X41C,0x426,0x51A,0x23B,0x6A4,0x3C3,0x3CB,0x1EE,0xD0,0x1DC,0x1E4,0x1EC,0x1F4,0x1F6,0x3D2,0x3D3,0x61A,0X502,0x50A,0x4F2,0XD6,0x512,0X600,0x602,0x620,0x622,0x192,0x194,0x4F4,0xEE,0xF4,0xFA,0X1B2,
    0x1B4,0X250,0X261,0X38E,0x3B3,0X2A2,0X1D4,0x1D6,0x1AA,0x1AC,0x290,0x27E,0X270,0x165,
    0X386,0X280,0x260,0X390,0x164,0X7F3,0x7FB,0X7EB,0x3DB,0x3E3,0X23A,0X3EB,0X3E2,0x3CA,
    0X3B2,0X3BA,0X3C2,0X364,0x350,0X64,0x34A,0x35A,0X7F2,0X7FA,0X3EA,0X3DA,0x342,
    0x362,0X402,0x40C,0x400,0x352,0X340,0X29A,0X5A,0x3E8,0x3C8,0x3B0,0X3B8,0x1DE,0X40A,
    0X7F0,0x7F8,0X3E0,0x3D8,0X3C0,0X1e6,0X3D0,0x503,0x513,0X142,0X7EA,0x144,0X60A,0X2B,
    0x48,0X675,0x174,0x4C4,0x6F8,0X12,0x510,0x155,0X175,0x59C,0x674,0x684,0x685,0x694,0x695,
    0X530,0x56A,0X500,0x550,0x672,0x152,0X162,0x154,0X162,0x396,0x69A,0x42,0x3A,0x4A,
    0X16A,0X1BE,0X40,0x1A,0X1A4,0X13A,0X14A,0x15A,
        0X5B0,0X3A3,0x3A2,0X4BA,0x4BC,0X2A,0x1CE,0x1BC,0x3AA,0X3A8,0X3AB,0x6DE,0x6ED,0x6E6,0X32,
        0x6BC,0x6C4,0x30,0X230,0x232,0xA6,0X612,0x594,0X540,0x564,0x682,0x692,0xA4,0XAE,0XC8,
        0xC0,0xBE,0xDC,0xE2,0xE8,0XC6,0xB6,0xB8,0xAC,0x592,0x562,0X67A,0x68A,0x7E8,0X7E0,0x7E2,
        0x7E3,0x6F0,0x6F5,0x6F6,0x6EE,0x4D4,0x4C2,0x5AE,0X4CA,
        0x4CC,0x4D2,0X6AD,0X6A2,0x6DC,0x6D2,0X6E4,0X6CC,0X5B8,0x5BA,0XE9,0XA,
        0X3A0,0X3A1,0x6AA,0X6AB,0x19B,0x143,0x15B,0x153,0x163,0x173,0x172,0x384,0x611,
        0x673,0x683,0x693,0x6CA,0x6D4,0x6C3,0x6AC,0x6BA,0x6BB,0x6C2]:
        rval[s] = s+4



    return rval

def get_sprite_names():

    rval = {0x2D6:"P",
    0x2D7:"L",
    0x2D8:"A",
    0x2D9:"Y",
    0x2DA:"E",
    0x2DB:"R",
    0x2DC:"S",
    0x2DD:"C",
    0x2DE:"T",
    0x2E8:"pole",
    0x2E9:"pole",
    0x440:"net",
    0x442:"net",
    0x7e0:"player_head_1",
    0x7e1:"player_torso_1",
    0x7e2:"player_tigh_1",
    0x7e3:"player_calf",
    0x7e4:"player_head_2",
    0x7e5:"player_torso_2",
    0x7e6:"player_tigh_2",
    0x7e7:"player_leg",

    }

    for i in range(0x2EE,0x2F5):
        rval[i] = "ball"
    for i in range(0x2E2,0x2EE):
        rval[i] = "pole"
    for i in range(0x4D2,0x4D5):
        rval[i] = "referee"

    return rval



if __name__ == "__main__":
    raise Exception("no main!")