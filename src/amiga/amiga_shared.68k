		.global osd_read_high_scores
		.global osd_write_high_scores
		.global	load_highscores
		.global	save_highscores
		.global osd_sound_start
		.global osd_music_stop
		.global	force_sound_stop
		.global music_tick
		.global	music_track_start_number
		.global	osd_get_last_known_pc
		.global	osd_dump_logs
		.global	osd_log_cpu
		.global	osd_cpu_logging_control
	

* sound engine and also highscore management, common to all versions
	
.include "custom.i"
.include "dos_lvos.i"
.include "whdload_funcs.i"
.include "us_champ_vball.inc"
.include "sounds.inc"
.include "data.inc"

SCORE_FILE_SIZE = 0x23

LOG_BUFFER_SIZE = 0x20000

.macro	GET_RAM_START_IN_A6	
	.ifdef	RELEASE
	lea		ram_buffer,a6
	.else
	move.l		ram_start_0000,a6
	.endif
	.endm
	
* < A0: buffer
osd_read_high_scores:
	movem.l	d0-d7/a0-a6,-(a7)
	GET_RAM_START_IN_A6
	*lea		(high_score_table_0294,a6),a1
	move.l	_resload,d0
	beq.b	0f
	move.l	d0,a2
	bsr		get_hiscore_name
	move.l	a1,-(a7)
 	jsr		resload_GetFileSize(a2)		
	move.l	(a7)+,a1
	tst.l	d0
	beq.b	1f
	bsr		get_hiscore_name
	jsr		resload_LoadFile(a2)	
	bra.b	1f
0:
	tst.b	highscore_loaded
	beq.b	1f

	* from DOS: just copy buffer
	lea		high_score_buffer,a1
	move.w	#SCORE_FILE_SIZE-1,d0
0:
	move.b	(a1)+,(a0)+
	dbf		d0,0b
1:
	movem.l	(a7)+,d0-d7/a0-a6
	rts
	
osd_write_high_scores:
	movem.l	d0-d7/a0-a6,-(a7)
	.ifdef	RELEASE
	tst.b	cheat_used		| don't save score if cheat on
	bne.b	2f
	.endif
	GET_RAM_START_IN_A6
*lea		(high_score_table_0294,a6),a0

	move.l	_resload,d0
	bne.b	1f
	* DOS
	* first just copy buffer as contiguous 
	lea		high_score_buffer,a1
	move.w	#SCORE_FILE_SIZE-1,d0
0:
	move.b	(a0)+,(a1)+
	dbf		d0,0b
	st.b	highscore_needs_saving
	jra		2f
1:
	* whdload
	move.l	a0,a1
	move.l	d0,a2
	move.l	#SCORE_FILE_SIZE,d0
	bsr		get_hiscore_name
	jsr		resload_SaveFile(a2)
2:

	movem.l	(a7)+,d0-d7/a0-a6
	rts

	
get_hiscore_name:
    lea normal_hiscorename,a0
	rts
	
load_highscores:
    move.l  _resload,d0
    bne.b   1f

	bsr.b		get_hiscore_name
    move.l  _dosbase,a6
    move.l  a0,d1
    move.l  #1005,d2
    jsr     (_LVOOpen,a6)
    move.l  d0,d1
    beq.b   1f
    move.l  d1,d4
    move.l  #SCORE_FILE_SIZE,d3
    move.l  #high_score_buffer,d2
    jsr (_LVORead,a6)
    move.l  d4,d1
    jsr (_LVOClose,a6)   
	st.b	highscore_loaded
1:

    rts

save_highscores:
	tst.l	_resload
	bne.b	1f
    tst.b   highscore_needs_saving
    beq.b   1f
    move.l  _dosbase,a6
	bsr.b		get_hiscore_name
    move.l  a0,d1
    move.l  #1006,d2
    jsr     (_LVOOpen,a6)
    move.l  d0,d1
    beq.b   1f
    move.l  d1,d4
    move.l  #SCORE_FILE_SIZE,d3
    move.l  #high_score_buffer,d2
    jsr (_LVOWrite,a6)
    move.l  d4,d1
    jsr (_LVOClose,a6)   
1:	
    rts
    

osd_music_stop:
*	movem.l	d0/a0/a6,-(a7)
*	lea		_custom,a6
*	move.w	#3,d0
*	jbsr	_mt_stopfx
*	movem.l	(a7)+,d0/a0/a6

	
	tst.b	music_playing
	jne		force_sound_stop
	rts

force_sound_stop:
	movem.l	d0-d1/a0/a6,-(a7)
	lea		_custom,a6
	move.b	#-1,music_track_start_number
    clr.w   music_tick   | not playing anymore
	clr.b	music_playing
	clr.l	looped_sound_enabled

    jsr		_mt_end
0:
	movem.l	(a7)+,d0-d1/a0/a6
	rts
	
osd_sound_start:
	movem.l	d0/d1/d2/a0/a1/a6,-(a7)
	lea		_custom,a6

	bclr	#7,d0			| stop loop command
	sne		d2

	cmp.w	#HAPPY_SND,d0
	jne		0f
	* special case for that one: the game plays it at a
	* super high frequency. Sounds must be queued by the sound
	* cpu so it doesn't matter but it matters for us!
	* so this sound has just been recorded repeated, and
	* played once (denied playing the other times)
	cmp.b	last_sound_played,d0
	jeq		10f
0:
	move.b	d0,last_sound_played
	
	lsl.w	#3,d0
	lea		sound_table,a0

	move.w	(a0,d0.w),d1	| sound type
	beq.b	10f		| no sound

2:
	cmp.w	#1,d1
	bne.b	4f		| music module
	move.w	(2,a0,d0.w),d1
	move.l	(4,a0,d0.w),a0
	lea		_custom,a6
	tst.w	d1
	beq.b	3f
	
	* looped sound
	moveq	#0,d0
	move.b	(10,a0),d0		| channel

	lea		looped_sound_enabled,a1
	
	* sound stop
	clr.b	(a1,d0.w)
	movem.l	d0/a0,-(a7)
	jbsr	_mt_stopfx
	movem.l	(a7)+,d0/a0
	tst.b	d2
	jne		10f		| sound stop requested: done
2:
	* now that prev loop is stopped, play the next one
	st.b	(a1,d0.w)
	jsr		_mt_loopfx
	bra.b	10f
3:
	jsr		_mt_playfx
10:
	movem.l	(a7)+,d0/d1/d2/a0/a1/a6
	rts

	* music
4:
	BREAKPOINT	"music????"
	* don't play if already playing
	* (music_tick value is not important for looped tunes
	* as long as it's not zero)


	* here we allow music to override another looping music
	*tst.w	music_tick
	*bne.b	10b
	* play the proper module pattern
	* load up the countdown if loop
	
	move.w	(2,a0,d0.w),d1	| pattern number in .mod file
	* since it's not zero, next vbl tick will play the music
	
	cmp.b	music_track_start_number,d1
	beq.b	10b		| same track, skip

    movem.l d0-a6,-(a7)
	bsr		force_sound_stop
    lea _custom,a6
 	movem.l	d0/a0,-(a7)
	*lea	burgertime_tunes,a0
	illegal
	
	move.b	d1,music_track_start_number
	move.w	d1,d0
    sub.l   a1,a1		| samples are in the module
    jsr _mt_init
	movem.l	(a7)+,d0/a0

    * set master volume a little less loud if needed
	move.b	(6,a0,d0.w),music_volume
	move.b	(7,a0,d0.w),music_loops
	move.w	(2,a0,d0.w),music_pattern	| pattern number in .mod file
	move.w	(4,a0,d0.w),d2

	move.w	d2,music_duration
	move.w	d2,music_tick

    moveq	#0,d0
	move.b	music_volume,d0
    jsr	_mt_mastervol
	st.b	music_playing
    jsr _mt_start
    movem.l (a7)+,d0-a6
	
6:
	jra	10b

	.ifndef	RELEASE

osd_get_last_known_pc:
	move.w	last_known_m6502_pc,d6
	rts
	
	
* < D6: 0 disable, 1 enable
osd_cpu_logging_control:
	move.b	d6,cpu_log_enable
	rts
	

osd_log_cpu:

	move.w	(6,a7),last_known_m6502_pc

	move.l	a6,-(a7)
	* check if cpu log is enabled
	tst.b	cpu_log_enable
	jeq		445f
	move.l	log_ptr,a6
	move.w	(10,a7),(a6)+	| the PC
	move.l	d1,-(a7)
	move.w	d0,(a6)+
	move.w	d1,(a6)+
	move.w	d2,(a6)+
	move.w	#0xDEAD,(a6)+
	move.l	a6,log_ptr
	cmp.w	#0xCAFE,(a6)  | hitting the protection buffer
	jne		444f
	BREAKPOINT	"cpu log buffer full, dumping and exiting!"
	jbsr	osd_dump_logs
	illegal
444:
	move.l	(a7)+,d1
445:
	move.l	(a7)+,a6
	rts
	
	



osd_dump_logs:
	move.w	sr,-(a7)
	move.w	#0x2700,SR
	movem.l	d0-a6,-(a7)
	
	jbsr	save_cpu_log
	
    movem.l (a7)+,d0-a6
	move.w	(a7)+,SR
	rts

save_cpu_log:
	move.l	_resload,a2
	lea		log_buffer,a1
	move.l	log_ptr,d0
	sub.l	a1,d0
	jeq		0f
	move.l	log_ptr,a0
	* add RAM & ROM base in the end
	move.l	a6,(a0)+
	move.l	#rom_8000,(a0)+
	addq	#8,d0
	lea		cpu_log_name(pc),a0
	jbsr	resload_SaveFile(a2)
0:	
	rts


cpu_log_name:
	.asciz	"cpu_log"
	.align	2
	.endif	


	.ifndef	RELEASE
log_ptr:
	.long	log_buffer

log_buffer:
	.skip	LOG_BUFFER_SIZE
	.rept	20
	.long	0xCAFECAFE
	.endr

cpu_log_enable:
	.word	0
	.endif

* all 4 channels
	.align	2
looped_sound_enabled:
	.long	0



music_playing:
	.byte	0

music_loops:
	.byte	0
music_volume:
	.byte	0
	.align	2
music_track_start_number:
	.word	-1
music_pattern:
	.word	0
music_tick:
	.word	0
last_known_m6502_pc:
	.word	0xFFFF
music_duration:
	.word	0
high_score_buffer:
	.skip	SCORE_FILE_SIZE
highscore_needs_saving:
	.byte	0
highscore_loaded:
	.byte	0
last_sound_played:
	.byte	0
normal_hiscorename:
	.asciz	"locknchase.high"


