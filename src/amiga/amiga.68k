*
*	Amiga-specific portions of US Championship Volleyball
*
* (c) JOTD 2025
*

start:
	move.l	a7,old_stack
	jra		_user

	.include "../src/breakpoint.inc"
	
 
	
	.include "custom.i"
	.include "exec_lvos.i"
	.include "dos_lvos.i"
	.include "graphics_lvos.i"

	.include "us_champ_vball.inc"
	.include "sounds.inc"
	.include "data.inc"
	
AttnFlags = 0x128
AFB_68010 = 0
AFB_68020 = 1

*NO68020 = 1

BORDERBLANK = 0

PREVIOUS_SPRITE_SIZE = 8
CURRENT_SPRITE_SIZE = 4

SCORE_FILE_SIZE = 0x23		| wrong

LOG_BUFFER_SIZE = 0x20000

NB_CLUTS_POW = 3
NB_CLUTS = 1<<NB_CLUTS_POW
NB_TILES = 0x4000

SPRITE_X_CORRECTION = -1
SPRITE_Y_CORRECTION = -8
HW_SPRITE_X_CORRECTION = 0
HW_SPRITE_Y_CORRECTION = 8

* start displaying earlier in ntsc mode, allowing
* full display
NTSC_Y_SHIFT = 12

Y_MAX = 512


BASE_BPLCON2_VALUE = 0x0064		| sprites above all playfields

SCREEN_TILE_ADDRESS = 0x2000
SCREEN_COLOR_ADDRESS = 0x3000
SPRITE_ADDRESS = 0x800


* if the alloc_sprite & update_sprite routines
* are reused, changing those offsets can make
* a quick reuse from game to game as most sprite
* RAMs have 4 bytes per sprite, only the order
* and some bits differ

TARGET_SPRITE_Y = 3
TARGET_SPRITE_X = 2
TARGET_SPRITE_ATTRIBUTES = 0
TARGET_SPRITE_CODE = 1


	.ifdef	RELEASE
OPT_ENABLE_LOGGING = 0           | DO NOT CHANGE THIS

	.else
OPT_ENABLE_LOGGING = 0
* set to higher values than 1 to speed game up



	.endif
	

OPT_ENABLE_DOUBLE_BUFFERING = 0

_custom = 0xDFF000

OPT_ENABLE_MULTIPLEXED_SPRITES = 0

NB_PLAYFIELD_PLANES = 8
TOTAL_NB_COLORS = 1<<NB_PLAYFIELD_PLANES
NB_BYTES_PER_ROW = 80


NB_LINES = 512
NB_PLAYFIELD_LINES = NB_LINES


SCREEN_PLANE_SIZE = NB_BYTES_PER_ROW*NB_PLAYFIELD_LINES

SCREEN_SIZE = SCREEN_PLANE_SIZE*NB_PLAYFIELD_PLANES
NB_HOST_SPRITES = 8

NB_TARGET_SPRITES = 8

SPRITE_X = 2
SPRITE_Y = 3
SPRITE_CODE = 0
SPRITE_ATTRIBUTES = 1
SPRITE_SIZEOF = 4


BIT_START_1P = 0
BIT_START_2P = 1

BIT_LEFT = 1
BIT_RIGHT = 0
BIT_UP = 2
BIT_DOWN = 3
BIT_FIRE = 4

.macro	GET_RAM_START_IN_A6	
	.ifdef	RELEASE
	lea		ram_buffer,a6
	.else
	move.l		ram_start_0000,a6
	.endif
	.endm
	
.macro	WAIT_BLIT
	.ifndef	RELEASE
	cmp.l	#_custom,a5
	jeq		0f
	BREAKPOINT	"custom should be set in A5"
0:
	.endif
	move.w	#0x8400,(dmacon,a5)		| blitter high priority
wait\@:
	BTST	#6,(dmaconr,a5)
	BNE.S	wait\@
	move.w	#0x0400,(dmacon,a5)		| blitter normal priority
.endm

.macro MUL_TABLE value,len
mul\value\()_table:
	.set    mulv,0
	.rept	\len
	dc.w	mulv
	.set	mulv,mulv+\value
	.endr
.endm


* debug macro that colors the screen until LMB pressed
.macro 	blitz_bypass
	move.w	d0,-(a7)
	clr.w	d0
loop\@:
	move.w	d0,_custom+color
	btst	#6,0xbfe001
	beq.b	out\@
	addq.w	#1,d0
	bra.b	loop\@
out\@:
	move.w	(a7)+,d0
	nop
.endm

* same thing but if LMB is pressed when entering, macro waits for release)
.macro blitz
w\@:
	btst	#6,0xbfe001
	beq.b	w\@
	blitz_bypass
.endm

	

* exports

	.global		_user
	.global		_player_start
	.global		_demo_end
	.global		_resload
	.global		_dosbase
	.global		cheat_used
* osd layer		
	.global osd_interrupt_control
	.global osd_break		| for debug	
	.global osd_blitz		| for debug
	.global osd_read_dsw1
	.global osd_read_dsw2
	.global	osd_set_bank
	.global	osd_read_system
	.global	osd_sound_command
	.global	osd_read_p1_inputs
	.global	osd_read_p2_inputs
	
	.global	osd_video_byte_dirty
	.global	osd_set_scrollx_hi
	.global	osd_set_scrollx_lo
	.global	osd_set_scrolly_lo

	.global osd_read_high_scores
	.global osd_write_high_scores
	.global	load_highscores
	.global	save_highscores
	.global osd_sound_start
	.global osd_music_stop
	.global	force_sound_stop
	.global music_tick
	.global	music_track_start_number
	.global	osd_get_last_known_pc
	.global	osd_dump_logs
	.global	osd_log_cpu
	.global	osd_cpu_logging_control
		
	.global	is_game_playing
		
	.include	"ReadJoypad.i"
	.include	"whdload_funcs.i"
		.text


	    
_user:
    * if D0 contains "WHDL"
    * A0 contains resload
        
    cmp.l   #0x05748444c,D0	| WHDL
    bne.b   .standard
	move.b	d1,_keyexit
    move.l a0,_resload

	move.l	a0,a2
	lea	(_tag,pc),a0
	jsr	(resload_Control,a2)
	
    bra		.no_forbid
.standard:
	
    * open dos library, graphics library
    move.l  0x4.W,a6
    lea dosname,a1
    moveq.l #0,d0
    jsr _LVOOpenLibrary(a6)
    move.l  d0,_dosbase

	lea	read_args_string(pc),a0
	lea	program_args(pc),a1
	move.l	#program_args_end-program_args,d0
	lsr.l	#2,d0		| number of longs
	

	bsr	get_args_BCPL

0:	
	lea		program_args,a0

	move.l	(A0)+,D0	| INVINCIBLE/S
	beq.b	1f
	or.l	#1,cheat_flags
	st.b	cheat_used
1:
	move.l	(A0)+,D0	| INFLIVES/S
	beq.b	2f
	or.l	#2,cheat_flags
	st.b	cheat_used
2:
	move.l	(A0)+,D0	| CHEATKEYS/S
	beq.b	2f
	* cheat isn't used as long as no cheat key is used
	or.l	#0x10,cheat_flags
2:

	move.l	(A0)+,D0	| FIVELIVES/K
	beq.b	2f
	bset	#1,dsw_options+3
2:
	move.l	(A0)+,D0	| FAST/K
	beq.b	2f
	bset	#0,dsw_options+3
2:


	lea		_custom,a5
	lea		debug_copperlist,a0
	move.l	a0,cop1lc(a5)

* no multitask
	
	move.l	4.W,A6
	* system-friendly PAL/NTSC detect
	cmp.b #50,0x212(a6)		| vblankfrequency
	jeq	0f
	* set NTSC
	move.l	#NTSC_MONITOR_ID,monitor
0:
	lea graphicsname,a1
    moveq.l #0,d0
    jsr _LVOOpenLibrary(a6)
    move.l  d0,_gfxbase
    move.l	d0,a6
	move.l	38(a6),old_syscoplist
	move.l	34(A6),old_actiview		| gb_ActiView

	sub.l	a1,a1
	jsr	_LVOLoadView(a6)
	jsr	_LVOWaitTOF(a6)
	jsr	_LVOWaitTOF(a6)
	
	jbsr		load_highscores
    * check if "floppy" file is here
    move.l  _dosbase(pc),a6
    move.l   #floppy_file,d1
    move.l  #1005,d2   | MODE_OLDFILE
    jsr     _LVOOpen(a6)
    move.l  d0,d1
    beq.b   .no_floppy
    * "floppy" file found
    jsr     _LVOClose(a6)
    * wait 2 seconds for floppy drive to switch off
    move.l  #100,d1
    jsr     _LVODelay(a6)
.no_floppy:

* no multitask
	
    move.l  4,a6
    jsr _LVOForbid(a6)

    
	sub.l	A1,A1
	jsr	_LVOFindTask(a6)		| find ourselves
	move.l	D0,A0
	move.l	#-1,184(A0)	| pr_WindowPtr: no more system requesters (insert volume, write protected...)

.no_forbid:

	lea		_custom,a5
	lea		debug_copperlist,a0
	move.l	a0,cop1lc(a5)
	
	lea		bobs_screen_buffer_1,a0
	*addq	#2,a0	| leave 16 bits hidden for left side clipping
	move.l	a0,playfield_screen_data_1
	move.l	a0,playfield_drawed_screen_ptr
	move.l	a0,playfield_displayed_screen_ptr
	
	st		music_track_start_number

	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
	lea		bobs_screen_buffer_2,a0
	addq	#2,a0	| leave 16 bits hidden for left side clipping
	move.l	a0,playfield_screen_data_2
	move.l	a0,playfield_displayed_screen_ptr
	.endif
		
	* init color table
	lea		copperlist_colors+2,a0
	lea		color_copper_pointers,a1
	moveq	#NB_PLAYFIELD_PLANES-1,d0
0:
	addq.w	#4,a0
	move.w	#31,d1
1:
	move.l	a0,(a1)+
	addq.w	#4,a0
	dbf		d1,1b
	dbf		d0,0b
	
	* temp load palette there
	lea		palette,a0
	lea		color_copper_pointers,a1
	move.w	#TOTAL_NB_COLORS-1,d0

0:
	move.l	(a1)+,a2
	move.w	(a0)+,(a2)
	dbf		d0,0b
	
	* blank sprites
	lea		game_sprites,a2
	
	* pad last sprite entries with blank
	move.l	#blank_sprite,d0
1:
	move.w	d0,(6,a2)
	swap	d0
	move.w	d0,(2,a2)
	swap	d0
	addq	#8,a2
	cmp.l	#game_sprites_end,a2
	bcs		1b
2:

	bsr		set_bobs_bitplanes

	* TODO set colors here
	

	move.l	cheat_flags,d0
	jeq		1f
	move.b	d0,d1
	and.b	#3,d1
	jeq		2f
	* cheat key disable highscore only if used
	st.b	cheat_used
2:


0:
1:
	*move.b	difficulty_level+3,d0
	*and.b	#3,d0
	

	
	move.l	misc_options,d1
	btst	#0,d1
	sne		frameskip
	.ifndef	RELEASE
	btst	#31,d1
	sne		break_at_startup_flag
	.endif
	st.b	d1
	move.l	dsw_options,d0
	btst	#0,d0
	jeq		0f
	bclr	#3,d1	| fast game
0:
	btst	#1,d0
	jeq		0f
	bclr	#0,d1	| 5 lives
0:
	* bits 1 and 2 at 0: bonus life at 15000 (else 20000, 30000)

	move.b	d1,dip_switches_2


	

	move.l	cheat_flags,d0
	btst	#0,d0
	beq.b	0f
	st		cheat_used
0:
	btst	#1,d0
	beq.b	0f
	st		cheat_used
0:
	btst	#2,d0
	beq.b	0f
	st		cheat_used
0:
	move.l	cheat_flags,d0
	btst	#3,d0
	beq.b	0f
	st		cheat_used

0:
		
	jsr	 _detect_controller_types 
	clr.b	controller_joypad_0
	clr.b	controller_joypad_1

	jra		demo_game


	
* < D0: bcpl string (with leading size byte)
* < A1: dest C string
bcpl_arg_string_copy:
    movem.l D0-D2/A0-A1,-(a7)
	lsl.l	#2,d0
	moveq.l	#0,d2
    move.l  d0,a0
	move.b	(a0)+,d2	| size
	beq.b	1f
	subq	#1,d2
0:
	move.b	(a0)+,(a1)+
	dbf		d2,0b
1:
    movem.l (a7)+,D0-D2/A0-A1
    rts


bcpl_string_to_int:
    movem.l A0/A1,-(a7)
    lea temp_filename_buffer(pc),a1
    bsr bcpl_arg_string_copy
    * convert to integer
    move.l  a1,a0
    * < A0: pointer on C string
    * > D0: value
    * > D1: -1 if ok, position of the string if error
    bsr parse_integer
    movem.l  (a7)+,a0/a1
	rts
	
* parse integer from string
* < A0: pointer on C string
* > D0: value
* > D1: -1 if ok, position of the string if error
parse_integer:
    movem.l  d2/d3,-(a7)
    * go to end of string
    moveq.l #-1,d1
.loop1:
    addq.l  #1,d1
    tst.b   (a0,d1.w)
    bne.b   .loop1
    * d1 is the number of chars
    moveq.l #0,d0
    moveq.l #0,d2
    subq.l  #2,d1   | 10th power minus 1
.loop2:
    move.b  (a0)+,d2
    beq.b   .out
    
    cmp.b   #32,d2
    beq.b   .skip
    sub.b   #48,d2
    bcs.b   .error
    cmp.b   #10,d2
    bcc.b   .error
    move.w  d1,d3
    bmi.b   .doadd
.muloop:
    mulu    #10,d2
    dbf d3,.muloop
.doadd:
    add.l   d2,d0
.skip:
    subq.l  #1,d1
    bra.b   .loop2
.out:    
    movem.l  (a7)+,d2/d3
    rts
.error:
    moveq.l #0,d0
    bra.b   .error
	
    * thanks Toni for this 1.3 read argument code
BCPL_RdArgs = 78
	
	* a1 = pointer to result array. Must be LONG aligned!
	* a0 = formatting string. BSTR!
	* d0 = size of result array (number of LONGs)
get_args_BCPL:
	movem.l d2/d3/d4,-(sp)
	move.l d0,d3
	moveq #BCPL_RdArgs,d0
	move.l a0,d1
	lsr.l #2,d1
	move.l a1,d2
	lsr.l #2,d2
	moveq #0,d4
	bsr.s call_bcpl
	movem.l (sp)+,d2/d3/d4
	rts

	* d0 = gv index
	* d1-d4 = bcpl parms

BCPL_STACK = 3000

call_bcpl:
	movem.l d2-d7/a2-a6,-(sp)

	move.l d0,d6
	move.l d1,d5

	move.l 4.w,a6
	move.l	_dosbase(pc),a5


	sub.l a1,a1
	jsr	_LVOFindTask(a6)
	move.l d0,a4

	* allocate BCPL stack
	move.l #BCPL_STACK,d0
	move.l #65536+1,d1
	jsr	_LVOAllocMem(a6)
	move.l d0,d7
	beq.s 0f
	
	movem.l d7/a5/a6,-(sp)

	moveq #0,d0
	move.l d5,d1
	sub.l a0,a0
	move.l d7,a1
	lea 3*4(a1),a1
	move.l 136(a4),a2
	add.w	d6,d6
	add.w	d6,d6
	move.l 0(a2,d6.w),a4
	movem.l 46(a5),a5/a6
	jsr (a5) | call bcpl!
	
	movem.l (sp)+,d7/a5/a6

0:
	move.l d7,a1
	move.l #BCPL_STACK,d0
	jsr	_LVOFreeMem(a6)


	movem.l (sp)+,d2-d7/a2-a6
	rts




demo_game:
		move		#0x4000,_custom+intena						| disable interrupts
		move		#0x7FFF,_custom+intreq						| ack all interrupts
		bsr			platform_init					| amiga-specific init
		
0:	
	* compute ram start
	lea		ram_buffer,a6
	.ifndef	RELEASE
	* align so real addresses are $xxxx0yyy
	* and lower 16-bit match original RAM offsets
	move.l	a6,d0
	clr.w	d0
	add.l	#0x10000,d0
	move.l	d0,a6
	move.l	a6,ram_start_0000
	.endif
	
	* default: install RAM 0
	jbsr	copy_bank_0
	
	* copy ROM at the end. Memory is one big block now
	lea	rom_8000,a0
	move.l	a6,a1
	add.l	#0x8000,a1
	move.w	#0x1FFF,d0
0:
	move.l	(a0)+,(a1)+
	dbf		d0,0b
	
	.ifndef	RELEASE
	* install dump and quit handler
	pea		dump_and_quit
	lea		2.W,a0
	move.l	#0x4AFC4EF9,(a0)+
	move.l	(a7)+,(a0)+
	.endif
	* enable interrupts. Game doesn't use them
	* but relies on vbl sync flags
	jbsr	cpu_init		| zero all registers
	moveq	#1,d0
	jbsr	osd_interrupt_control
	jmp		reset_eea1								| pass control to the mpatrol core
	
	.ifndef	RELEASE
dump_and_quit:	
	jbsr	osd_dump_logs
	illegal
	.endif
	

* < A6: memory base
copy_bank_1:
	movem.l	a0/a1/d0,-(a7)
	lea	bank1_4000,a0
	jra		cb
copy_bank_0:
	movem.l	a0/a1/d0,-(a7)
	lea	bank0_4000,a0
cb:
	move.l	a6,a1
	add.l	#0x4000,a1
	move.w	#0xFFF,d0
0:
	move.l	(a0)+,(a1)+
	dbf		d0,0b
	movem.l	(a7)+,a0/a1/d0
	rts
	
* just in case some hardware calls nmi
_nmi:
	move.w	#0x7FFF,_custom+intreq
	move.w	#0x7FFF,_custom+intreq
	rts
	
_vblank:
    movem.l d0-d7/a0-a6,-(a7)
	lea		_custom,a5
	move.w	(intreqr,a5),d0
	btst	#5,d0
	beq.b		1f

	move.l	_joypad_state(pc),d1
	move.l	d1,d2
	moveq	#1,d0
	jsr	_read_joystick
	move.l	d0,_joypad_state
	jbsr	update_controls
	
	move.l	_joypad_state,d0
	btst	#JPB_BTN_BLU,d0
	beq.b	0f
	btst	#JPB_BTN_BLU,d2
	bne.b	0f
	bsr		toggle_pause
0:

	
	* ack vbl twice (040/pistorm bug)
	move.w	#0x20,(intreq,a5)
	move.w	#0x20,(intreq,a5)	
	jra	3f
1:
	* has to be copper: set sync

	* we're going to ack copper & software/level 5 interrupt now
	* do it twice (040/pistorm bug)
	move.w	#0x14,(intreq,a5)
	move.w	#0x14,(intreq,a5)

	tst.b	pause_flag
	jne	23f


	* set base for RAM
	GET_RAM_START_IN_A6
	* declare that we're in interrupt mode so osd_disable_interrupts/osd_enable_interrupts
	* is level 1 interrupt set? that would mean that mid-screen interrupt
	* is the source of the interrupt
	btst	#2,d0
	beq.b	2f
	* mid-screen copper interrupt, must occur once every 5 times
	* to simulate ~60 Hz on 50 Hz display
	move.b	mid_screen_interrupt_count,d0
	addq.b	#1,d0
	cmp.b	#5,d0
	bne.b	1f
	jbsr	nmi_ee9e
	clr.b	d0
1:
	move.b	d0,mid_screen_interrupt_count
	jra		23f	| no need to update sprites we're in the middle of a frame
2:

	subq.w	#1,delay_timer
		
	jbsr	nmi_ee9e

	tst.b	frameskip
	jeq		0f
	eor.b	#1,flip_flop
	jeq		23f
0:

	**jbsr		really_update_sprites
	
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
	jbsr		switch_screen_buffers
	.else
	jbsr	set_bobs_bitplanes
	.endif
	
	
23:
	jbsr	log_used_tiles

3:
    movem.l (a7)+,d0-d7/a0-a6
    rte
	
	
osd_blitz:
	blitz
	rts
	cmp.b #0x47,(a7)
	jeq 0f
  move.b  #0,0x100
0:
osd_break:
	* sends a WinUAE command to enter WinUAE debugger
	.ifndef	RELEASE
* wait for VBL, so when breakpoint is hit, the DMA has displayed the current picture
	move.l	D0,-(a7)
	move.l	a0,-(a7)
	move.w	SR,-(a7)
	* block interrupts during the vblank wait
	* in dev mode, we use whdload in supervisor mode so SR can be written to
	move.w	#0x2700,SR
	lea	_custom,a0
	.rept	2
	move.w	#0x7FFF,intreq(a0)
0:
	move.w	intreqr(a0),d0
	btst	#5,d0
	beq.b	0b
	.endr
	move.w	(a7)+,sr
	move.l	(a7)+,a0

	pea     0.w
	* Normally it would point to where the result of the command is written, but since the last parameter (first pushed)
	* indicating the number of bytes to write is 0, nothing is written.
	pea     0.w	
	pea     1003f-1002f
	pea     1002f(pc)
	pea     -1.w
	pea     82.w
	jsr     0xf0ff60
	lea     24(sp),sp
	move.l	(a7)+,d0
	.endif
    rts
		
1002: .asciz    "AKS_ENTERDEBUGGER 1"
1003:
        .align	2

* < D0: number of 1/60Hz ticks
* can work with interrupts enabled or disabled
osd_wait:
	move.w	d0,delay_timer
	**jbsr	osd_is_vblank_interrupt_enabled
	tst.w	d0
	jne		2f
	* interrupts are disabled: timer isn't going to change
	* wait using vertical blank interrupt request (we don't need it!)
	clr.w	one_out_of_five
0:
	move.w	#0x20,_custom+intreq
	move.w	#0x20,_custom+intreq
1:
	move.w	_custom+intreqr,d0
	btst	#5,d0
	beq.b	1b
	addq.w	#1,one_out_of_five
	cmp.w	#5,one_out_of_five
	bne.b	5f
	subq.w	#1,delay_timer	
	clr.w	one_out_of_five
5:
	subq.w	#1,delay_timer
	beq.b	4f
	bpl.b	0b
4:
	rts
	
2:
	tst.w	delay_timer
	bne.b	2b
	rts



	
	

	

* Z: set if playing
is_game_playing:
	move.l	a6,-(a7)
	GET_RAM_START_IN_A6
	* both flags are at 1 when actual game is playing (not demo)
	cmp.l	a6,a6
	movem.l	(a7)+,a6
	rts
	
lose_all_lives:
	move.l	a6,-(a7)
	GET_RAM_START_IN_A6
	move.l	(a7)+,a6
	rts

skip_level:
	move.l	a6,-(a7)
	GET_RAM_START_IN_A6
	move.l	(a7)+,a6
	rts

add_10000_points:
	move.l	a6,-(a7)
	GET_RAM_START_IN_A6
	movem.w	d0/d7,-(a7)
	move.b	(0x33,a6),d0
	MOVE.b	#0x01,d7
	abcd	d7,d0
	move.b	d0,(0x33,a6)
	movem.w	(a7)+,d0/d7
	move.l	(a7)+,a6
	rts

	
* what: blits data on bg plane, no horizontal shifting (erase)
* args:
* < A0: pristine background
* < A1: dest buffer
* < D0: X (rounded to smaller 8-multiple)
* < D1: Y
* < D2: width in bytes
* < D4: height

* trashes: D0-D1

blit_background:
	movem.l	d2-d6/a0-a5,-(a7)
	lea		_custom,a5
	* adjust offset X: X//8
	lsr.w	#3,d0
	lea		mulNB_BYTES_PER_ROW_table(pc),a4
	add.w	d1,d1
	* add Y offset: Y*40
	add.w	(a4,d1.w),d0
	* same offset for source and destination
	add.w	d0,a1
	add.w	d0,a0
	

    move.l  #0x09f00000,d3    | A->D copy, ascending mode	
	move.w	#NB_BYTES_PER_ROW,d1		| blit modulo

    sub.w   d2,d1       | blit modulo
    lsl.w   #6,d4
    lsr.w   #1,d2		| blit width
    add.w   d2,d4       | blit height
	
    * always the same settings

    * now just wait for blitter ready to write all registers
	WAIT_BLIT
    
    * blitter registers set

	move.l d3,bltcon0(a5)	| sets con0 and con1

    move.w  d1,bltamod(a5)	|A modulo
    move.w  d1,bltdmod(a5)	|D modulo
							
	move.l a0,bltapt(a5)	|source graphic top left corner
	move.l a1,bltdpt(a5)	|destination top (bottom) left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
	
	.rept	NB_PLAYFIELD_PLANES-1
	add.l	#SCREEN_PLANE_SIZE,a0
	add.l	#SCREEN_PLANE_SIZE,a1
	WAIT_BLIT
	* second bitplane
	move.l a0,bltapt(a5)	|source graphic top left corner
	move.l a1,bltdpt(a5)	|destination top (bottom) left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
	.endr
	
	movem.l	(a7)+,d2-d6/a0-a5
	rts


*TILE_GET_INFO_MEMBER(vball_state::get_bg_tile_info)
*{
*	uint8_t code = m_videoram[tile_index];
*	uint8_t attr = m_attribram[tile_index];
*	tileinfo.set(0,
*			code + ((attr & 0x1f) << 8) + (m_gfxset << 8),
*			(attr >> 5) & 0x7,
*			0);
*}

*void vball_state::draw_sprites(bitmap_ind16 &bitmap, const rectangle &cliprect)
*{
*	gfx_element *gfx = m_gfxdecode->gfx(1);
*
*/*  240-Y    S|X|CLR|WCH WHICH    240-X
*    xxxxxxxx x|x|xxx|xxx xxxxxxxx xxxxxxxx
**/
*	for (int i = 0; i < m_spriteram.bytes(); i += 4)
*	{
*		int attr = m_spriteram[i + 1];
*		int which = m_spriteram[i + 2]+ ((attr & 0x07) << 8);
*		int sx = ((m_spriteram[i + 3] + 8) & 0xff) - 7;
*		int sy = 240 - m_spriteram[i];
*		int size = (attr & 0x80) >> 7;
*		int color = (attr & 0x38) >> 3;
*		int flipx = ~attr & 0x40;
*		int flipy = 0;
*		int dy = -16;
*
*		if (flip_screen())
*		{
*			sx = 240 - sx;
*			sy = 240 - sy;
*			flipx = !flipx;
*			flipy = !flipy;
*			dy = -dy;
*		}
*
*		switch (size)
*		{
*			case 0: // normal
*			gfx->transpen(bitmap, cliprect, (which + 0), color, flipx, flipy, sx, sy, 0);
*			break;
*
*			case 1: // double y
*			gfx->transpen(bitmap, cliprect, (which + 0), color, flipx, flipy, sx, sy + dy, 0);
*			gfx->transpen(bitmap, cliprect, (which + 1), color, flipx, flipy, sx, sy, 0);
*			break;
*		}
*	}
*}

really_update_sprites:
update_bobs_and_hw_sprites:
	

	***********************
	* erase previous BOBs *
	***********************
	
	move.l	bob_previous_drawed_sprites(pc),a4
	lea		_custom,a5
	

	* clear previous positions

	move.w	#NB_TARGET_SPRITES-1,d7
1:
	move.w	(2,a4),d1
	beq.b	11f		| y=0: inactive
	move.w	(a4),d0
	and.w	#0x1F0,d0		| align on 16 lower bound
	* clear area where the sprite was
	clr.l	(a4)+			| ack deletion
	move.w	(a4),d4			| height
	move.w	(2,a4),d2		| width
	clr.l	(a4)+			| ack deletion
	move.w	#NB_PLAYFIELD_PLANES,d3
	move.l	playfield_drawed_screen_ptr(pc),a1
	jbsr		clear_planes_any_blitter_internal
	dbf		d7,1b	
	bra.b	12f
11:
	addq	#PREVIOUS_SPRITE_SIZE,a4
	dbf		d7,1b
12:	


	*********************
	* draw current BOBs *
	*********************

	GET_RAM_START_IN_A6
	lea		(SPRITE_ADDRESS,a6),a0
    lea _custom,A5
	move.l	bob_previous_drawed_sprites(pc),a6
	lea		bob_table,a4
	
	moveq	#NB_TARGET_SPRITES-1,d7
1:
	jbsr	update_one_bob
	addq.w	#CURRENT_SPRITE_SIZE,a0
	dbf		d7,1b

	rts

compute_sprite_xy_code:
	moveq	#0,d0
	move.b	(TARGET_SPRITE_X,a0),d0
	neg.w	d0
	add.w	#240,d0
	moveq	#0,d1
	move.b	(TARGET_SPRITE_Y,a0),d1

	.ifne	SPRITE_Y_CORRECTION
	add.w	#SPRITE_Y_CORRECTION,d1
	.endif
	.ifne	SPRITE_X_CORRECTION
	add.w	#SPRITE_X_CORRECTION,d0
	.endif
	
	moveq	#0,d2
	move.b	(TARGET_SPRITE_CODE,a0),d2
	rts
	
* < A0,A1
* < A2: sprite type table
* < A4
* < A3: pointer on copperlist (updated if slot allocated)
* < D6: updated if slot has been allocated
* A3,A5,A6,D0-D5 may be used as scratch registers

update_one_sprite:
	move.b	(TARGET_SPRITE_ATTRIBUTES,a0),d3
	btst	#0,d3
	jeq	2f			| bit not set: not shown

	jbsr	compute_sprite_xy_code
	cmp.b	#2,(a2,d2.w)
	jne		2f			| not a HW sprite: skip, bob display will collect
	add.w	d2,d2
	add.w	d2,d2
	move.l	(a4,d2.w),a5		| get pointer from bob table

	btst	#1,d3
	jeq		101f
	addq	#8,a5		| mirror
101:
	move.l	(a5),a5
	.ifne	HW_SPRITE_X_CORRECTION
	add.b	#HW_SPRITE_X_CORRECTION,d0
	.else
	tst.w	d0
	.endif
	jmi		2f		| don't display if negative!

	.ifne	HW_SPRITE_Y_CORRECTION
	add.b	#HW_SPRITE_Y_CORRECTION,d1
	.endif
	tst.b	ntsc_flag
	jeq		0f
	sub.w	#NTSC_Y_SHIFT,d1
0:
	bsr		store_sprite_pos
	
	* first sprite of couple
	move.l	d0,(a5)
	move.l	a5,d1
	* store sprite pointer in copperlist
	move.w	d1,(4,a3)
	swap	d1
	move.w	d1,(a3)
	
	* second sprite of couple
	BSET	#7,d0		| attach bit set
	lea		(0x48,a5),a5
	
	move.l	d0,(a5)
	move.l	a5,d1
	* store sprite pointer in copperlist
	move.w	d1,(4+8,a3)
	swap	d1
	move.w	d1,(8,a3)
	add.w	#0x10,a3	| advance in sprite copperlist part
	addq	#1,d6		| count one more sprite


2:
	rts
	
update_one_bob:
	move.l	A0,-(a7)
*		int const sx = m_spriteram[0][offs];
*		int const sy = 240 - m_spriteram[1][offs + 1];
*
*		int const code = m_spriteram[0][offs + 1];
*		int const color = m_spriteram[1][offs] & 0x0f;
*		int const flipx = ~m_spriteram[1][offs] & 0x40;
*		int const flipy = m_spriteram[1][offs] & 0x80;

	* code = 0 and clut = 0 => disabled ?? to check
	
	move.b	(TARGET_SPRITE_ATTRIBUTES,a0),d3
	btst	#0,d3
	jeq	2f			| bit not set: not shown

	jbsr	compute_sprite_xy_code
	add.w	d2,d2
	add.w	d2,d2
	move.l	(a4,d2.w),d4		| get pointer from bob table
	.ifndef	RELEASE
	jne		100f
	* in dev mode, break if we try to display a non-existing bob
	* we have the table (0,1,2) but if we forgot to register a bob
	* then we could miss out some sprite
	moveq	#0,d2
	move.b	(TARGET_SPRITE_CODE,a0),d2
	BREAKPOINT	"unregistered sprite clut (D2=code)"
	jra		2f
100:
	.endif
	move.l	d4,a0
	btst	#1,d3
	jeq		101f
	* mirror
	add.w	#((NB_PLAYFIELD_PLANES+1)*4+6)*2,a0
101:
	move.w	(a0)+,d4		| height
	move.w	(a0)+,d5		| width
	add.w	(a0)+,d1		| add offset to Y
	* A0 points on the first bitplane of the bob

	move.l		playfield_drawed_screen_ptr(pc),a1
	
	* D0 and D1 are already set
	move.l	(NB_PLAYFIELD_PLANES*4,a0),d2
	beq.b	2f		| mask is zero: blank tile => skip
	move.l	d2,a3
	moveq	#0,d2	| no y-clip
	*sub.w	#16,d0	| move each bob 16 bits to the left
	* note down that this bob will have to be erased
	move.w	d0,(a6)+			| store current sprite attributes to previous ones
	move.w	d1,(a6)+			| store current sprite attributes to previous ones
	move.w	d4,(a6)+			| store height
	move.w	d5,(a6)+			| store width in bytes
	move.w	d5,d2			| width in bytes, 4 for 16 pixels+shift
	moveq	#0,d5			| Y-offset

	btst	#2,d3
	jeq		101f
	* flip
	neg.w	d4
101:


	moveq	#NB_PLAYFIELD_PLANES,d3		| 3 planes

	jbsr		blit_planes_any_internal_cookie_cut
2:
	move.l	(a7)+,a0
	rts


* < D0,D1: x,y
* < A1: foreground plane pointer (often first plane!)
* < D2: width in bytes (inc. 2 extra for shifting)
* < D3: nb planes to clear
* < D4: blit height


* trashes D0-D6/A2
clear_planes_any_blitter_internal:
    * pre-compute the maximum of shit here
	move.w	d1,d6
    beq.b   1f    | optim
	* check if y start + height > Y_MAX
	* (ignores case where y = 0, no risk)
	add.w	d4,d6
	sub.w	#Y_MAX,d6
	bmi.b	0f
	* y start + height > Y_MAX: clip height
	sub.w	d6,d4
	beq.b	10f
	bpl.b	0f
10:
	* null or negative height after clipping: out
	rts
0:
    lea mulNB_BYTES_PER_ROW_table(pc),a2
    add.w   d1,d1
    move.w  (a2,d1.w),d1
1:
    and.w   #0x1F0,d0
    beq.b   2f				| zero X optimization
    lsr.w   #3,d0
    add.w   d0,d1
2:   
    add.w   d1,a1       | plane position (always even)

	* reuse d1 for bltcon0
	moveq	#1,d1
	ror.l	#8,d1     | AKA move.l  #0x01000000,d1   | minterm useD & rect clear (0xA) 

	move.w #NB_BYTES_PER_ROW,d0
	bclr	#0,d2		| make sure D2 is even (else strange things occur!)
    sub.w   d2,d0       | blit width

	move.w	d4,d6		| save height
    lsl.w   #6,d4
    lsr.w   #1,d2
    add.w   d2,d4       | blit height+width
	moveq	#-1,d2
    * now just wait for blitter ready to write all registers
	WAIT_BLIT
    
	move.l	d2,bltafwm(a5)
	move.l d1,bltcon0(a5)	
    move.w  d0,bltdmod(a5)	|D modulo
	
	subq	#1,d3
	jeq		4f
3:
	WAIT_BLIT
	move.l a1,bltdpt(a5)	|destination top left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
32:
	add.l	#SCREEN_PLANE_SIZE,a1
	dbf		d3,3b
4:
	rts
	
	
	
* what: blits 16x? data on one plane, cookie cut
* args:
* < A0: pointers on 16x? data
* < A1: plane  (40 rows)
* < A3: source mask for cookie cut (16x16)
* < D0: X
* < D1: Y
* < D2: source y-offset
* < D3: height of data
* trashes: D0-D1
blit_planes_cookie_cut_16x:
    lea _custom,A5
	move.w	d2,d5
	move.w	d3,d4
	moveq	#NB_PLAYFIELD_PLANES,d3		| 4 planes
    moveq  #4,d2       | 16 pixels + 2 shift bytes
* < A5: custom
* < D0.W,D1.W: x,y
* < A0: source (pointer on array of planes)
* < A1: destination fg plane, also background to mix with cookie cut fg plane
* < A3: source mask for cookie cut
* < D2: width in bytes (inc. 2 extra for shifting)
* < D3: number of planes
* < D4: height. If negative, source is copied with negative modulo (flip)
* < D5: y offset for source planes
* < D7: blit mask (not considered, optim, -1 all through the game)
* blit mask set
* returns: start of destination in A1 (computed from old A1+X,Y)
* trashes: a1
blit_planes_any_internal_cookie_cut:
    movem.l d0-d7/a4,-(a7)
    * pre-compute the maximum of shit here
	tst.w	d4
	bpl.b	1f
	sub.w	d4,d1	| pre-add height to d1
	subq.w	#1,d1	| minus one
1:	
	tst	d1
    beq.b   2f    | optim
    lea		mulNB_BYTES_PER_ROW_table(pc),a4
	.ifdef	NO68020
	add.w	d1,d1
    move.w  (a4,d1.w),d1	| y times 40
	.else
    move.w  (a4,d1.w*2),d1	| y times 40
	.endif
2:
	lea		cookie_cut_blit_table(pc),a4
	
    move.w  d0,d6
    lsr.w   #3,d0			| X displacement in bytes
	*bclr	#0,d0			| no need, it will be even
    and.w   #0xF,d6
	.ifdef	NO68020
	add.w	d6,d6
	add.w	d6,d6
	move.l	(a4,d6.w),d7
	lea		cookie_cut_mask_blit_table(pc),a4
	move.l	(a4,d6.w),d6
	.else
	move.l	(a4,d6.w*4),d7
	lea		cookie_cut_mask_blit_table(pc),a4
	move.l	(a4,d6.w*4),d6
	.endif
3:   
    add.w   d0,d1
4:
    * make offset even. Blitter will ignore odd address
    * but a 68000 CPU doesn't and since we RETURN A1...
    *bclr    #0,d1
    add.w   d1,a1       | plane position (D1 < 0x7FFF, 288*40=0x2D00)
	move.w	#NB_BYTES_PER_ROW,d0
	tst.w	d4
	bpl.b	5f
	neg.w	d0
	neg.w	d4    | make d4 positive again
5:
    sub.w   d2,d0       | blit width
    lsl.w   #6,d4
    lsr.w   #1,d2
    add.w   d2,d4       | blit height
    * always the same settings (ATM)
	moveq	#0,d2
	add.w	d5,a3			| apply y offset to mask too (y offset looks wrong)
	
    * now just wait for blitter ready to write all registers
	WAIT_BLIT
    
    * blitter registers set

	move.w d2,bltamod(a5)		|A modulo=bytes to skip between lines
	move.w d2,bltbmod(a5)		|B modulo=bytes to skip between lines
	
    move.w  d0,bltcmod(a5)	|C modulo
    move.w  d0,bltdmod(a5)	|D modulo
					
	subq	#1,d3
	beq.b	7f
	subq	#1,d3
6:
	move.l a3,bltapt(a5)	|source graphic top left corner (mask)
	bsr.b	start_process_1_plane
	
	move.l	a1,bltcpt(a5)	|pristine background top (bottom) left corner
	move.l	a1,bltdpt(a5)	|destination top (bottom) left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
	add.l		#SCREEN_PLANE_SIZE,a1
	WAIT_BLIT
	dbf		d3,6b
7:
	move.l a3,bltapt(a5)	|source graphic top left corner (mask)
	bsr.b	start_process_1_plane
	move.l	a1,bltcpt(a5)	|pristine background top (bottom) left corner
	move.l	a1,bltdpt(a5)	|destination top (bottom) left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
    
    movem.l (a7)+,d0-d7/a4
    rts
	
start_process_1_plane:
	move.l (a0)+,d0
	beq.b	60f
	move.l	d0,a4
	add.w	d5,a4		| add Y offset
	bra.b	61f
60:
	* source is 0: just apply mask (less bandwidth lost) and change bltcon
	move.l	d6,bltcon0(a5)	| sets con0 and con1: C-A->D cookie cut, B fixed
 	move.w	d2,bltbdat(a5)	|B word is zero
	rts
61:
	* non-zero: set data source & bltcon
	move.l	d7,bltcon0(a5)	| sets con0 and con1: C-A+B->D cookie cut full
	move.l	a4,bltbpt(a5)	|source graphic top left corner
	rts

	.macro	GEN_MINTERM_TABLE	name,value
\name\()_table:
	.set	shift,0
	.rept	16
	.long	(shift<<28)+(shift<<12)+(\value<<16)
	.set	shift,shift+1
	.endr
	.endm
	
	.macro	GEN_MINTERM_TABLE_2	name,value
\name\()_table:
	.set	shift,0
	.rept	16
	.long	(shift<<28)+(\value<<16)
	.set	shift,shift+1
	.endr
	.endm
	
	GEN_MINTERM_TABLE	cookie_cut_blit,0x0FCA
	GEN_MINTERM_TABLE_2	cookie_cut_mask_blit,0x0BCA


* 2 words: first shift (as bplcon value), then
* offset in bytes


hw_sprite_allocated_frames:
	.skip	0x80
current_hw_sprite:
	.word	0

	
bob_previous_positions_1:
	ds.b	NB_TARGET_SPRITES*PREVIOUS_SPRITE_SIZE
bob_previous_drawed_sprites:
	.long	bob_previous_positions_1
bob_previous_displayed_sprites:
	.ifeq	OPT_ENABLE_DOUBLE_BUFFERING
	.long	bob_previous_positions_1
	.else
	.long	bob_previous_positions_2	
bob_previous_positions_2:
	ds.b	NB_TARGET_SPRITES*PREVIOUS_SPRITE_SIZE	
	.endif

	
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
switch_screen_buffers:

	* let's switch screen buffers, background (chars)
	* toggle fg planes (double buffering)
	* also toggle previous sprite positions
	lea		playfield_drawed_screen_ptr(pc),a0
	lea		bob_previous_positions_1(pc),a2
	lea		bob_previous_positions_2(pc),a3
	move.l	playfield_screen_data_1,a1
	move.l	playfield_screen_data_2,a5
	* also switch previous state memory
	cmp.l	(a0),a1
	bne.b	2f
	* screen data 1 is displayed screen
	* set it to drawn screen
	exg		a1,a5
	exg		a2,a3
2:
	move.l	a1,(a0)
	move.l	a5,playfield_displayed_screen_ptr
	move.l	a3,bob_previous_displayed_sprites
	move.l	a2,bob_previous_drawed_sprites

	jbra		set_bobs_bitplanes
	.endif
	
	
store_system:
	tst.l	_resload
	beq.b	0f
	rts
0:
	* system copper
	
	move.l	4.W,a6
	move.w	AttnFlags(a6),d0
	btst	#AFB_68010,d0
	beq.b	1f
	lea	get_vbr,a5

	jsr		_LVOSupervisor(a6)
	move.l	d0,system_vbr
1:
	
	pea		2f(pc)	
2:
	move.l	(a7)+,d0
	cmp.l	#0x200000,d0
	bcs.b	3f				| could crawl if no fastmem
	move.w	AttnFlags(a6),d0
	btst	#AFB_68020,d0
	bne.b	1f
3:
	* no whdload, no 68020: assume slow
	* if running on PiStorm, well, too bad use whdload
	*st.b	frameskip
	nop
1:

	lea	_custom,a6
	move.w	intenar(a6),old_intena
	move.w	dmaconr(a6),old_dmacon
	lea		old_sysvectors,a0
	move.l	system_vbr(pc),a1
	move.l	(0x68,a1),(a0)+
	move.l	(0x6c,a1),(a0)+
	move.l	(0x70,a1),(a0)+
	move.l	(0x74,a1),(a0)+
	move.l	(0x78,a1),(a0)+
	move.l	(0x7C,a1),(a0)+
	rts

restore_system:
	move.l	system_vbr(pc),a0
	lea	_custom,a6
	jsr		_mt_remove_cia

	move.w	#0x4000,intena(a6)	| ints off
	lea		old_sysvectors,a0
	move.l	system_vbr(pc),a1
	move.l	(a0)+,(0x68,a1)
	move.l	(a0)+,(0x6c,a1)
	move.l	(a0)+,(0x70,a1)
	move.l	(a0)+,(0x74,a1)
	move.l	(a0)+,(0x78,a1)
	move.l	(a0)+,(0x7C,a1)


	bclr	#6,0xbfee01


	lea	_custom,a6
	move.w	old_intena,d0			| get old val
	and.w	#0x3fff,d0
	eor.w	#0x3fff,d0
	move.w	d0,intena(a6)		| clr bits
	eor.w	#0x3fff,d0
	or.w	#0xc000,d0		
	move.w	d0,intena(a6)		| set bits and main

	move.w	old_dmacon,d0			| get old val
	and.w	#0x3fff,d0
	eor.w	#0x3fff,d0

***		and.w	#0xfff0,d0		| preserve sound dma for now

	move.w	d0,dmacon(a6)		| clr bits



	eor.w	#0x3fff,d0
	or.w	#0xc000,d0		
	move.w	d0,dmacon(a6)		| set bits and main

	move.l	old_syscoplist,cop1lc(a6)
	move.l	_gfxbase,a6
	move.b	gb_ChipRevBits0(a6),chiprevbits+3
	move.l	old_actiview,a1
	jsr	_LVOLoadView(a6)


	moveq	#0,d0
	rts

quit_to_os:
	tst.l	_resload
	bne.b	0f
	bsr		restore_system
	* set SR to 0 from here, so we return to OS with SR=0
	* (else it kills the system pretty quickly)
	* it works as quit_to_os is called from an interrupt
	move.w	#0,SR
	move.l	old_stack(pc),a7
	jbsr		save_highscores
	moveq	#0,d0
	rts
0:
	pea	  TDREASON_OK
	move.l	_resload(pc),-(a7)
	addq.l	#resload_Abort,(a7)
	rts



	
platform_init:
	bsr		store_system
	

	lea		_custom,a5
	move.w	#0x7FFF,dmacon(a5)
	move.w	#0x7FFF,intena(a5)
	* set blitter parameters once and for all
    move.l  #-1,bltafwm(a5)
	
	move.l	monitor,d0
	cmp.l	#NTSC_MONITOR_ID,D0
	bne		0f
	st.b	ntsc_flag
	* disable extra mid-screen interrupt, as it would be too fast (NTSC)
	move.w	#0x1FE,pal_intreq_block_game
	move.w	#0x1FE,pal_wait			| else intreq never happens
0:
    move.w #0x0210+BORDERBLANK,bplcon0(a5) | 8 bitplanes, borderblank
    move.w #0x0024,bplcon2(a5)
    move.w #0x0C00+BORDERBLANK<<5,bplcon3(a5)     | no AGA specificities, default ECS

 	*         VVHH
    move.w #0x2489,d0
    move.w #0x2479,d1
	cmp.l	#NTSC_MONITOR_ID,monitor
	jne		0f
	sub.w	#NTSC_Y_SHIFT<<8,d0
	sub.w	#NTSC_Y_SHIFT<<8,d1
0:	
     move.w d0,diwstrt(a5)
     move.w d1,diwstop(a5)

    move.w #0x0038,ddfstrt(a5)
    move.w #0x00D0,ddfstop(a5)		| C0 for fmode=3


   
	
	# 0 modulo (OCS)
	move	#NB_BYTES_PER_ROW-40,d0
    move.w d0,bpl1mod(a5)
    move.w d0,bpl2mod(a5)

	
	lea		_custom,a5
	lea		game_copperlist,a0
	move.l	a0,cop1lc(a5)

	
	* set sprite registers in copperlist
	
	* attached sprites for main character & car
	lea		game_sprites,a0
	*bsr		init_game_sprite_bank
	



	* wait 300 lines
	move.w	#100,d0
	bsr	beamdelay
	move.w	#100,d0
	bsr	beamdelay
	move.w	#100,d0
	bsr	beamdelay
	
    * init sprite, bitplane, whatever dma

    move.w #0x83E0,dmacon(a5)
 

	* install keyboard and vblank/copper handler
	move.l	system_vbr(pc),a1
	pea		level2_interrupt(pc)
	move.l	(a7)+,(0x68,a1)
	pea		_vblank(pc)
	move.l	(a7)+,(0x6C,a1)
	pea		_nmi(pc)
	move.l	(a7)+,(0x7C,a1)

	* soundfx lib
	lea		_custom,a6
	lea		blank_sound,a0
	move.l	a0,(0xA0,a6)
	move.l	a0,(0xB0,a6)
	move.l	a0,(0xC0,a6)
	move.l	a0,(0xD0,a6)
	move.l	system_vbr(pc),a0
	moveq	#1,d0	| PAL
	jsr		_mt_install_cia


	
    rts
	
* < A0: palette
* < A1: copperlist
* < D0: number of colors to load	
load_palette:
	subq.w	#1,d0
	beq.b	2f
1:
	addq.w	#2,a1
	move.w	(a0)+,(a1)+
	dbf		d0,1b
2:
	rts
	


	
	

* 60Hz VBLANK interrupt (also keyboard)
* only called at bootup, not from interrupts (at least!!)
osd_interrupt_control:
	tst.b	d0
	jeq		0f
	move.w	#0xC038,_custom+intena
	rts
0:
	move.w	#0x0030,_custom+intena
	rts
	
	
* write to 0x4003 to issue a sound
* track down those writes in MAME debugger: wpset 4003,1,W,,{printf "%d",A;g}
* < D0: sound code
osd_sound_command:
	move.w	d0,-(a7)
	and.w	#0x3F,d0	| just in case
	jne		0f
	jbsr	force_sound_stop
	jra		1f
0:
	lea		sound_indirection_table(pc),a1
	move.b	(a1,d0.w),d0
	jmi		1f

	* avoid enemy spray sound repeat (plays continuously)
*	cmp.b	#ENEMY_SPRAYED_SND,d0
*	jne		2f
*	cmp.b	previous_sound,d0
*	jeq		1f
*2:
	move.b	d0,previous_sound
	jbsr	osd_sound_start
1:
	.ifndef	RELEASE
	cmp.b	#-1,d0
	jne		1f
	move.w	d2,-(a7)
	move.w	(2,a7),d2
	BREAKPOINT	"unmapped sound (in D2)"
	move.w	(a7)+,d2
1:
	.endif
	move.w	(a7)+,d0
	rts

previous_sound:
	.word	-1
	
sound_indirection_table:
    .byte    -1   | 0

    .byte    -1   | 31
    .byte    -2   | 32 climbing, order is given but sound is silent!
    .byte    -2   | 33 walking, order is given but sound is silent!
    .byte    -1   | 34
    .byte    -1   | 35
    .byte    -1   | 36
    .byte    -1   | 37
    .byte    -1   | 38
    .byte    -1   | 39
    .byte    -1   | 40
    .byte    -1   | 41
    .byte    -1   | 42
    .byte    -1   | 43
    .byte    -1   | 44
    .byte    -1   | 45
    .byte    -1   | 46
    .byte    -1   | 47
    .byte    -1   | 48
    .byte    -1   | 49
    .byte    -1   | 50
    .byte    -1   | 51
    .byte    -1   | 52
    .byte    -1   | 53
    .byte    -1   | 54
    .byte    -1   | 55
    .byte    -1   | 56
    .byte    -1   | 57
    .byte    -1   | 58
    .byte    -1   | 59
    .byte    -1   | 60
    .byte    -1   | 61
    .byte    -1   | 62
    .byte    -1   | 63
	
	
osd_set_bank:
	move.b	d0,d4
	* graphics set (there are 0x4000 tiles, activate upper 0x2000-0x3FFF half)
	btst	#5,d0
	seq		higher_gfxset		| inverted logic
	
	rol.b	#2,d0
	and.b	#3,d0
	move.b	d0,scroll_y			| set scroll high value
	
	* now memory bank (bit 1 of the input)
	bclr	#0,d4
	jne		set_bank_1
	move.b	d4,bank_value
	cmp.b	#0,current_rom_bank
	jeq		0f
	* set bank 0
	*BREAKPOINT	"setting bank 0"
	jbsr	copy_bank_0
	move.b	#0,current_rom_bank
	.ifndef	RELEASE
	move.w	last_known_m6502_pc,last_bankswitch_pc
	.endif
	rts
set_bank_1:
	move.b	d4,bank_value
	cmp.b	#1,current_rom_bank
	jeq		0f
	* set bank 1
	*BREAKPOINT	"setting bank 1"
	jbsr	copy_bank_1
	move.b	#1,current_rom_bank
	.ifndef	RELEASE
	move.w	last_known_m6502_pc,last_bankswitch_pc
	.endif
0:
	rts

* a0=screen address (preserved)
* a6=ram base
* should preserve all registers
* allows 2000-3FFF range
* 2000: tiles
* 3000: attributes
osd_video_byte_dirty:
	movem.l	d0-d7/a0-a2,-(a7)
	move.b	(a0),d0
	move.l	a0,d7		| save address
	sub.l	a6,d7
	.ifndef	RELEASE
	jmi		2f
	.endif

	* we now suppose that we're in 2000-3FFF
	* check that in debug mode
	.ifndef		RELEASE
	cmp.w	#SCREEN_TILE_ADDRESS+0x2000,d7
	jcs		0f
1:
	BREAKPOINT	"write videoram out of range (D7)"
	bra.b	osd_w_videoram_out	
0:
	.endif
	
	sub.w	#SCREEN_TILE_ADDRESS,d7
	.ifndef	RELEASE
	jpl		0f
	add.w	#SCREEN_TILE_ADDRESS,d7
	BREAKPOINT	"write videoram out of range (D7)"
	jra		osd_w_videoram_out		| sprite memory: out
0:
	.endif
	
	and.w	#0xFFF,d7

	lea		(SCREEN_TILE_ADDRESS,a6),a0
	move.b	(a0,d7.w),d0
	lea		(SCREEN_COLOR_ADDRESS,a6),a0
	move.b	(a0,d7.w),d1


	jbsr	update_bg_tile

osd_w_videoram_out:
	movem.l	(a7)+,d0-d7/a0-a2
	rts	
	
	.macro	COPY_TILE8_PLANE_ROW
	move.b	d0,(offset,a1)  | buffer
	.endm
	
	.macro	CLEAR_TILE8_PLANE
	.set	offset,0
	.rept	8
	clr.b	(offset,a1)
	.set	offset,offset+NB_BYTES_PER_ROW
	.endr	
	.endm
	
	.macro	TILE8_NEXT_PLANE
	add.l	d5,a1			| needs LONG
	.endm

	


* < D7: 0-0x1000
* > D0/D1: coords 
compute_tile_xy:
	moveq	#0,d0
	move.b	d7,d0
	
	* for each screen quadrant, compute base X/Y (0-31)
	and.b	#0x1F,d0	| x
	move.w	d7,d1
	lsr.w	#5,d1		| Y
	and.b	#0x1F,d1
	* now add X or Y shift depending on quadrant
	btst	#11,d7		| 0x8xx ?
	jeq		0f
	add.w	#0x20,d1	| lower quadrant
0:
	btst	#10,d7		| 0x4xx / 0xCxx ? right quadrant
	jeq		0f
	add.w	#0x20,d0	| right quadrant
0:
	lsl.w	#3,d1		| Y times 8
	rts

*compute_tile_xy_portrait:
*	moveq	#0,d0
*	moveq	#0,d1
*	move.w	d7,d1
*	lsr.w	#5,d7		| this is X
*	neg.w	d7
*	add.w	#32,d7
*	and.w	#0x1F,d1	| this is Y
*	*addq.w	#2,d1
*
*	move.b	d7,d0		| this is X
*	lsl.b	#3,d1		| Y times 8
*	rts



* each column has 0x20*8 = 256 pixels
* each visible row has 28*8 = 244 pixels

* < D7: 0-0x1000 offset
* < D0: tile code
* < D1: tile attribute

update_bg_tile:
	moveq	#0,d2
	move.w	d0,d2	| code
	move.w	d1,d3	| attribute + tile msbits
	and.w	#0x1F,d3
	lsl.w	#8,d3
	add.w	d3,d2			| extended tile code
	move.w	d1,d3	| attribute + tile msbits
	lsr.w	#5,d3	| clut
	tst.b	higher_gfxset
	jeq		12f
	add.w	#NB_TILES/2,d2		| upper half
12:

	bsr		compute_tile_xy
	lea		character_table,a0

	
	* updating bitplanes
	move.l	#SCREEN_PLANE_SIZE,d5
	move.w	#NB_PLAYFIELD_PLANES-1,d4
	move.l	playfield_drawed_screen_ptr,a1


	lea		mulNB_BYTES_PER_ROW_table,A2
	add.w	d1,d1
	move.w	(a2,d1.w),d1
	swap	d0
	clr		d0
	swap	d0
	add.w	d1,d0
	add.l	d0,a1		| long!
	
	add.w	d2,d2
	jeq		11f				| optimize
	add.w	d2,d2	
	move.l	(a0,d2.l),d0		| tile pointer as LONG!
	
	*jeq		11f 	| can happen when tile code is read when screen is being erased	
	.ifndef	RELEASE
	jne		12f
	lsr.w	#2,d2
	add.w	#SCREEN_TILE_ADDRESS,d7
	*BREAKPOINT	"unregistered game tile (in D2, at address D7)"	
	.endif

	jra		11f
12:
	move.l	d0,a2
	move.l	(a2,d3.w*4),d0	| get proper clut
	jeq		11f
	
	
	move.l	d0,a2		| directly pointer on tile bitplanes
	
	
standard_tile:
	* just copy
4:
	move.l	(a2)+,d0		| next plane
	jeq		5f
	move.l	d0,a0
	.set	offset,0
	.rept	8
	move.b	(a0)+,d0
	COPY_TILE8_PLANE_ROW
	.set	offset,offset+NB_BYTES_PER_ROW
	.endr
41:


	TILE8_NEXT_PLANE
	dbf		d4,4b
0:
	rts
5:
	CLEAR_TILE8_PLANE
	jra		41b
41:
	TILE8_NEXT_PLANE
	dbf		d4,4b
0:
	rts

	* clear tile
11:
	CLEAR_TILE8_PLANE
	TILE8_NEXT_PLANE
	dbf		d4,11b
2:
	rts
	


	
* < d0.w: x
* < d1.w: y
* < a1: sprite pos table (depending on height)
* > d0.L: control word
store_sprite_pos:
	tst.w	d1
	jmi	0f
	cmp.w	#Y_MAX,d1
	jcc	0f

    move.l  a0,-(a7)

    lea	HW_SpriteXTable(pc),a0
	
	.ifdef	NO68020
    add.w	d0,d0
    add.w	d0,d0
    move.l	(a0,d0.w),d0
	move.w	d1,-(a7)
    add.w	d1,d1
    add.w	d1,d1
    or.l	(a1,d1.w),d0
	move.w	(a7)+,d1
	.else
    move.l	(a0,d0.w*4),d0
    or.l	(a1,d1.w*4),d0	
	.endc
    move.l  (a7)+,a0
    rts
0:
	moveq	#0,d0
	rts
	



HW_SpriteXTable:
	.set	reptn,0
	.rept 320
	.set	x,reptn+0x80
	.set reptn,reptn+1
    .byte  0,x>>1,0,x&1
  .endr

	.macro DEF_HW_SPRITE_Y_TABLE	height
HW_SpriteYTable_\height:
  .set	reptn,0
  .rept 288
	.set	ys,reptn+0x1c
	.set	ye,ys+\height
    .byte  ys&255, 0, ye&255, ((ys>>6)&4)+((ye>>7)&2)
	.set	reptn,reptn+1
  .endr
	.endm

	DEF_HW_SPRITE_Y_TABLE	16

set_bobs_bitplanes:
	movem.l	a0-a1/d0-d2,-(a7)
 	lea	bobs_bitplanes+2,a0
    moveq #NB_PLAYFIELD_PLANES-1,d1
 	move.l	#SCREEN_PLANE_SIZE,d2

	move.w	scroll_y,d0
	add.w	d0,d0
	lea		mulNB_BYTES_PER_ROW_table,a2
	move.w	(a2,d0.w),d0		| compute Y offset
    add.l	playfield_displayed_screen_ptr(pc),d0
	* TODO X offset
	
set_bitplanes:
1:
    swap d0
    move.w d0,(a0)
    swap d0
    move.w d0,(4,a0)    
    addq.w  #8,a0
    add.l d2,d0
    dbf d1,1b
	movem.l	(a7)+,a0-a1/d0-d2
    rts

	
osd_debug_hook:
	rts
	
	
osd_read_p1_inputs:
	move.b	#0xFF,d0
	rts
	
osd_read_p2_inputs:
	move.b	#0xFF,d0
	rts
	
osd_set_scrollx_hi:
	move.b	d0,scroll_x
	rts
osd_set_scrollx_lo:
	move.b	d0,scroll_x+1
	rts
osd_set_scrolly_lo:
	move.b	d0,scroll_y+1
	rts

	

* < D1: previous state
update_controls:
	moveq	#-1,d0


	lea		keyboard_table(pc),a0

	tst.b	(0x4C,a0)		| "up" key
	beq.b	0f
	bclr	#BIT_UP,d0
0:
	tst.b	(0x4D,a0)		| "down" key
	beq.b	0f
	bclr	#BIT_DOWN,d0
0:
	tst.b	(0x4F,a0)		| "<-" key
	beq.b	0f
	bclr	#BIT_LEFT,d0
0:
	tst.b	(0x4E,a0)		| "->" key
	beq.b	0f
	bclr	#BIT_RIGHT,d0
0:
	tst.b	(0x63,a0)		| "ctrl" key
	beq.b	0f
	bclr	#BIT_FIRE,d0
0:
*	tst.b	(0x64,a0)		| left "alt" key
*	beq.b	0f
*	bclr	#BIT_JUMP,d0
*0:

	* directions + fire
	move.l	_joypad_state(pc),d1
	btst	#JPB_BTN_UP,d1
	beq.b	0f
	bclr	#BIT_UP,d0
0:
	btst	#JPB_BTN_DOWN,d1
	beq.b	0f
	bclr	#BIT_DOWN,d0
0:
	btst	#JPB_BTN_LEFT,d1
	beq.b	0f
	bclr	#BIT_LEFT,d0
0:
	btst	#JPB_BTN_RIGHT,d1
	beq.b	0f
	bclr	#BIT_RIGHT,d0
0:
	btst	#JPB_BTN_RED,d1
	beq.b	0f
	bclr	#BIT_FIRE,d0
0:
	move.b	d0,player_1_controls

	jbsr		is_game_playing
	jeq	0f
	* game not playing, we can insert coin/start with joypad
	btst	#JPB_BTN_RED,d1		| "5" key like in MAME
	jeq		0f
	btst	#JPB_BTN_RED,d2
	jne		0f
	nop  | todo insertcoin
0:
	rts
	
direction_table:
	.byte	0x00,0x01,0x01,0x00,0x01,0xff,0xff,0x00	| 0x0000
	.byte	0x01,0xff,0xff,0x00,0x00,0x00,0x00,0x00	| 0x0008	



osd_read_dsw1:
	* actual dipswitches
	not.b	d0		| active low
	move.b	#0xBF,d0	| what MAME returns
	rts
	
osd_read_system:
	move.b	#0x3F,d0
	movem.l	a0/d1,-(a7)
	lea		keyboard_table(pc),a0
	tst.b	(1,a0)		| "1" key like in MAME
	beq.b	0f
	bclr	#BIT_START_1P,d0
0:
	tst.b	(2,a0)		| "2" key like in MAME
	beq.b	0f
	bclr	#BIT_START_2P,d0
0:	

	jbsr		is_game_playing
	jeq	1f
	move.l	_joypad_state,d1
	* game not playing, we can start with joypad
	btst	#JPB_BTN_UP,d1		| "1" key like in MAME
	beq.b	0f
	bclr	#BIT_START_1P,d0
0:
	btst	#JPB_BTN_DOWN,d1		| "2" key like in MAME
	beq.b	0f
	bclr	#BIT_START_2P,d0
0:	
1:	
	movem.l	(a7)+,a0/d1
	rts

	
osd_read_dsw2:
	* actual dipswitches
	move.b	dip_switches_2(pc),d0
	
	rts


	

level2_interrupt:
	bsr		handle_keyboard
	move.w	#8,_custom+intreq
	rte
	
	
*TILE_GET_INFO_MEMBER(vball_state::get_bg_tile_info)
*{
*	uint8_t code = m_videoram[tile_index];
*	uint8_t attr = m_attribram[tile_index];
*	tileinfo.set(0,
*			code + ((attr & 0x1f) << 8) + (m_gfxset << 8),
*			(attr >> 5) & 0x7,
*			0);
*}


log_used_tiles:
	* scan the whole screen, see what was updated
	* main screen
	
	GET_RAM_START_IN_A6
	lea		(SCREEN_TILE_ADDRESS,a6),a5
	lea		(SCREEN_COLOR_ADDRESS,a6),a4
	lea	tile_log_table,a0
	move.w	#0x1000-1,d7
0:
	moveq	#0,d1
	moveq	#0,d0
	move.b	(a5,d7.w),d0	| tile code
	move.b	(a4,d7.w),d1	| tile attribute

	move.b	d1,d2
	and.w	#0x1F,d2
	lsl.w	#8,d2
	add.w	d2,d0			| extended tile code
	tst.b	higher_gfxset
	jeq		12f
	add.w	#NB_TILES/2,d0		| upper half
12:
	lsr.w	#5,d1
	
*		tst.b	d0
*		jeq		444f
*	cmp.w	#0x841,d7
*	jne	444f
*	BREAKPOINT	"logging 841!! nonzero"
*444:

	and.b	#7,d1		| remove flip/mirror
	lsl.l	#NB_CLUTS_POW,d0			| tile code * NB_CLUTS (long!)
	add.l	d1,d0			| add clut
	st.b	(a0,d0.l)
	dbf		d7,0b

	rts
	
handle_keyboard:
	movem.l	D0/A0/A5,-(a7)
	LEA	0x00BFD000,A5
	MOVEQ	#0x08,D0
	AND.B	0x1D01(A5),D0
	jeq		1f
	MOVE.B	0x1C01(A5),D0
	NOT.B	D0
	ROR.B	#1,D0		| raw key code here
  
	CLR.B	0x1C01(A5)
  
    lea keyboard_table(pc),a0
    bclr    #7,d0
    seq (a0,d0.w)       | updates keyboard table
    jne   2f     | we don't care about key release
	
	cmp.b	#55,d0		| "M" key
	jne		0f
	eor.b	#1,no_main_tune
	jeq		0f
	jbsr	osd_music_stop
0:
    cmp.b   #0x19,d0	| "P" key
    bne.b   0f

    bsr	toggle_pause
0:


	* cheat keys are always active in dev mode
	.ifdef	RELEASE
	btst	#4,cheat_flags+3
	jeq		10f
	.endif
	* cheat keys
	cmp.b	#0x51,d0	| F2 key: open gates
	bne.b	0f
	move.w	#0x0FF,_custom+color
	movem.l	d0-a6,-(a7)
	GET_RAM_START_IN_A6
	movem.l (a7)+,d0-a6

	st.b	cheat_used
	
0:

	cmp.b	#0x50,d0	| F1 key: skip level
	bne.b	0f
	st.b	cheat_used
	jbsr	skip_level
	move.w	#0x0FF,_custom+color
	
0:
	cmp.b	#0x52,d0	| F3 key
	bne.b	0f
	st.b	cheat_used
	* add 10000 points
	move.w	#0x0FF,_custom+color
	jbsr	add_10000_points
	
0:
	cmp.b	#0x53,d0	| F4 key
	bne.b	0f
	st.b	cheat_used
	move.w	#0x0FF,_custom+color

0:
*	cmp.b	#0x54,d0	| F5 key
*	bne.b	0f
*	st.b	cheat_used
*	move.w	#0x0FF,_custom+color
*0:
*
10:
	.ifndef	RELEASE
	cmp.b	#34,d0
	bne		0f
	* 'D': dump all logging buffers to data dir
	jbsr	osd_dump_logs
0:

	* last life, if killed, direct game over
	cmp.b	#0x57,d0	| F8 key: lose all lives
	bne.b	0f
	move.w	#0x0FF,_custom+color
	* last life, if killed, direct game over
	bsr		lose_all_lives
	jbsr	force_sound_stop
0:
	cmp.b	#0x58,d0	| F9 key crashes game (restarts whdload)
	bne.b	0f
	illegal
0:

	.endif

	cmp.b	_keyexit,d0	| "ESC" key or whdload quitkey
	bne.b	2f
	BSET	#0x06,0x1E01(A5)
	moveq	#2,d0
	bsr	beamdelay
	BCLR	#0x06,0x1E01(A5)	| acknowledge key
	bra		quit_to_os
2:
	BSET	#0x06,0x1E01(A5)
	moveq	#2,d0
	bsr	beamdelay
	BCLR	#0x06,0x1E01(A5)	| acknowledge key

1:
	movem.l	(a7)+,d0/a0/a5
	rts
	
toggle_pause:
	* pause only within game
	jbsr		is_game_playing
	beq.b	0f
	eor.b   #1,pause_flag
0:
	rts

	

    
* < D0: numbers of vertical positions to wait
beamdelay:
0:
	move.w  d0,-(a7)
    move.b	0xdff006,d0	| VPOS
1:
	cmp.b	0xdff006,d0
	beq.s	1b
	move.w	(a7)+,d0
	dbf	d0,0b
	rts

	
	MUL_TABLE	NB_BYTES_PER_ROW,NB_LINES

	.align	4		| leave this long word alignment
program_args:	ds.l	64,0
program_args_end:
	.long	0		| add a longword else it overwrites the read args string in kick 1.3!
	.align	4
read_args_string:
	.byte	read_args_string_end-read_args_string
	.ascii	"INVINCIBLE/S,INFLIVES/S,"
	.ascii	"CHEATKEYS/S,FIVELIVES/S,FAST/S"
read_args_string_end:
	.align	2

* < A0: buffer
osd_read_high_scores:
	movem.l	d0-d7/a0-a6,-(a7)
	GET_RAM_START_IN_A6
	*lea		(high_score_table_0294,a6),a1
	move.l	_resload,d0
	beq.b	0f
	move.l	d0,a2
	bsr		get_hiscore_name
	move.l	a1,-(a7)
 	jsr		resload_GetFileSize(a2)		
	move.l	(a7)+,a1
	tst.l	d0
	beq.b	1f
	bsr		get_hiscore_name
	jsr		resload_LoadFile(a2)	
	bra.b	1f
0:
	tst.b	highscore_loaded
	beq.b	1f

	* from DOS: just copy buffer
	lea		high_score_buffer,a1
	move.w	#SCORE_FILE_SIZE-1,d0
0:
	move.b	(a1)+,(a0)+
	dbf		d0,0b
1:
	movem.l	(a7)+,d0-d7/a0-a6
	rts
	
osd_write_high_scores:
	movem.l	d0-d7/a0-a6,-(a7)
	.ifdef	RELEASE
	tst.b	cheat_used		| don't save score if cheat on
	bne.b	2f
	.endif
	GET_RAM_START_IN_A6
*lea		(high_score_table_0294,a6),a0

	move.l	_resload,d0
	bne.b	1f
	* DOS
	* first just copy buffer as contiguous 
	lea		high_score_buffer,a1
	move.w	#SCORE_FILE_SIZE-1,d0
0:
	move.b	(a0)+,(a1)+
	dbf		d0,0b
	st.b	highscore_needs_saving
	jra		2f
1:
	* whdload
	move.l	a0,a1
	move.l	d0,a2
	move.l	#SCORE_FILE_SIZE,d0
	bsr		get_hiscore_name
	jsr		resload_SaveFile(a2)
2:

	movem.l	(a7)+,d0-d7/a0-a6
	rts

	
get_hiscore_name:
    lea normal_hiscorename,a0
	rts
	
load_highscores:
    move.l  _resload,d0
    bne.b   1f

	bsr.b		get_hiscore_name
    move.l  _dosbase,a6
    move.l  a0,d1
    move.l  #1005,d2
    jsr     (_LVOOpen,a6)
    move.l  d0,d1
    beq.b   1f
    move.l  d1,d4
    move.l  #SCORE_FILE_SIZE,d3
    move.l  #high_score_buffer,d2
    jsr (_LVORead,a6)
    move.l  d4,d1
    jsr (_LVOClose,a6)   
	st.b	highscore_loaded
1:

    rts

save_highscores:
	tst.l	_resload
	bne.b	1f
    tst.b   highscore_needs_saving
    beq.b   1f
    move.l  _dosbase,a6
	bsr.b		get_hiscore_name
    move.l  a0,d1
    move.l  #1006,d2
    jsr     (_LVOOpen,a6)
    move.l  d0,d1
    beq.b   1f
    move.l  d1,d4
    move.l  #SCORE_FILE_SIZE,d3
    move.l  #high_score_buffer,d2
    jsr (_LVOWrite,a6)
    move.l  d4,d1
    jsr (_LVOClose,a6)   
1:	
    rts
    

osd_music_stop:
*	movem.l	d0/a0/a6,-(a7)
*	lea		_custom,a6
*	move.w	#3,d0
*	jbsr	_mt_stopfx
*	movem.l	(a7)+,d0/a0/a6

	
	tst.b	music_playing
	jne		force_sound_stop
	rts

force_sound_stop:
	movem.l	d0-d1/a0/a6,-(a7)
	lea		_custom,a6
	move.b	#-1,music_track_start_number
    clr.w   music_tick   | not playing anymore
	clr.b	music_playing
	clr.l	looped_sound_enabled

    jsr		_mt_end
0:
	movem.l	(a7)+,d0-d1/a0/a6
	rts
	
osd_sound_start:
	movem.l	d0/d1/d2/a0/a1/a6,-(a7)
	lea		_custom,a6

	bclr	#7,d0			| stop loop command
	sne		d2

	cmp.w	#HAPPY_SND,d0
	jne		0f
	* special case for that one: the game plays it at a
	* super high frequency. Sounds must be queued by the sound
	* cpu so it doesn't matter but it matters for us!
	* so this sound has just been recorded repeated, and
	* played once (denied playing the other times)
	cmp.b	last_sound_played,d0
	jeq		10f
0:
	move.b	d0,last_sound_played
	
	lsl.w	#3,d0
	lea		sound_table,a0

	move.w	(a0,d0.w),d1	| sound type
	beq.b	10f		| no sound

2:
	cmp.w	#1,d1
	bne.b	4f		| music module
	move.w	(2,a0,d0.w),d1
	move.l	(4,a0,d0.w),a0
	lea		_custom,a6
	tst.w	d1
	beq.b	3f
	
	* looped sound
	moveq	#0,d0
	move.b	(10,a0),d0		| channel

	lea		looped_sound_enabled,a1
	
	* sound stop
	clr.b	(a1,d0.w)
	movem.l	d0/a0,-(a7)
	jbsr	_mt_stopfx
	movem.l	(a7)+,d0/a0
	tst.b	d2
	jne		10f		| sound stop requested: done
2:
	* now that prev loop is stopped, play the next one
	st.b	(a1,d0.w)
	jsr		_mt_loopfx
	bra.b	10f
3:
	jsr		_mt_playfx
10:
	movem.l	(a7)+,d0/d1/d2/a0/a1/a6
	rts

	* music
4:
	BREAKPOINT	"music????"
	* don't play if already playing
	* (music_tick value is not important for looped tunes
	* as long as it's not zero)


	* here we allow music to override another looping music
	*tst.w	music_tick
	*bne.b	10b
	* play the proper module pattern
	* load up the countdown if loop
	
	move.w	(2,a0,d0.w),d1	| pattern number in .mod file
	* since it's not zero, next vbl tick will play the music
	
	cmp.b	music_track_start_number,d1
	beq.b	10b		| same track, skip

    movem.l d0-a6,-(a7)
	bsr		force_sound_stop
    lea _custom,a6
 	movem.l	d0/a0,-(a7)
	*lea	burgertime_tunes,a0
	illegal
	
	move.b	d1,music_track_start_number
	move.w	d1,d0
    sub.l   a1,a1		| samples are in the module
    jsr _mt_init
	movem.l	(a7)+,d0/a0

    * set master volume a little less loud if needed
	move.b	(6,a0,d0.w),music_volume
	move.b	(7,a0,d0.w),music_loops
	move.w	(2,a0,d0.w),music_pattern	| pattern number in .mod file
	move.w	(4,a0,d0.w),d2

	move.w	d2,music_duration
	move.w	d2,music_tick

    moveq	#0,d0
	move.b	music_volume,d0
    jsr	_mt_mastervol
	st.b	music_playing
    jsr _mt_start
    movem.l (a7)+,d0-a6
	
6:
	jra	10b

	.ifndef	RELEASE

osd_get_last_known_pc:
	move.w	last_known_m6502_pc,d6
	rts
	
	
* < D6: 0 disable, 1 enable
osd_cpu_logging_control:
	move.b	d6,cpu_log_enable
	rts
	

osd_log_cpu:

	move.w	(6,a7),last_known_m6502_pc
	move.w	(6,a7),0x100

	move.l	a6,-(a7)
	cmp.w	#0x4000,last_known_m6502_pc
	jcs		0f
	cmp.w	#0x8000,last_known_m6502_pc
	jcc		0f
	* 4000-8000 PC: check if bank 0 is set
	tst.b	current_rom_bank
	jeq		0f
	* we could have missed one bankswitch
	move.w	last_bankswitch_pc,d5
	BREAKPOINT		"running code in 4000-8000 when bank doesn't match"
	ILLEGAL
0:
	* check if cpu log is enabled
	tst.b	cpu_log_enable
	jeq		445f
	move.l	log_ptr,a6
	move.w	(10,a7),(a6)+	| the PC
	move.l	d1,-(a7)
	move.w	d0,(a6)+
	move.w	d1,(a6)+
	move.w	d2,(a6)+
	move.w	#0xDEAD,(a6)+
	move.l	a6,log_ptr
	cmp.w	#0xCAFE,(a6)  | hitting the protection buffer
	jne		444f
	BREAKPOINT	"cpu log buffer full, dumping and exiting!"
	jbsr	osd_dump_logs
	illegal
444:
	move.l	(a7)+,d1
445:
	move.l	(a7)+,a6
	rts
	
	



osd_dump_logs:
	move.w	sr,-(a7)
	move.w	#0x2700,SR
	movem.l	d0-a6,-(a7)
	
	jbsr	save_cpu_log

	move.l	_resload,a2
	lea		tile_log_table,a1
	lea		tile_log_name(pc),a0
	move.l	#NB_CLUTS*NB_TILES,d0
	jbsr	resload_SaveFile(a2)
	
    movem.l (a7)+,d0-a6
	move.w	(a7)+,SR
	rts

save_cpu_log:
	move.l	_resload,a2
	lea		log_buffer,a1
	move.l	log_ptr,d0
	sub.l	a1,d0
	jeq		0f
	move.l	log_ptr,a0
	* add RAM & ROM base in the end
	move.l	a6,(a0)+
	move.l	#rom_8000,(a0)+
	addq	#8,d0
	lea		cpu_log_name(pc),a0
	jbsr	resload_SaveFile(a2)
0:	
	rts


cpu_log_name:
	.asciz	"cpu_log"
tile_log_name:
	.asciz	"used_tiles"
sprite_log_name:
	.asciz	"used_sprites"

	.align	2
	.endif	


	.ifndef	RELEASE
log_ptr:
	.long	log_buffer

log_buffer:
	.skip	LOG_BUFFER_SIZE
	.rept	20
	.long	0xCAFECAFE
	.endr

cpu_log_enable:
	.word	0
	.endif

* all 4 channels
	.align	2
looped_sound_enabled:
	.long	0



music_playing:
	.byte	0

music_loops:
	.byte	0
music_volume:
	.byte	0
	.align	2
music_track_start_number:
	.word	-1
music_pattern:
	.word	0
music_tick:
	.word	0
last_known_m6502_pc:
	.word	0xFFFF
last_bankswitch_pc:
	.word	0xFFFF
music_duration:
	.word	0
high_score_buffer:
	.skip	SCORE_FILE_SIZE
highscore_needs_saving:
	.byte	0
highscore_loaded:
	.byte	0
last_sound_played:
	.byte	0
normal_hiscorename:
	.asciz	"us_champ_vball.high"
	.align	2


old_intena:
	.long	0
old_dmacon:
	.long	0
old_sysvectors:
	ds.l	10
old_vbr:
	.long	0
old_syscoplist:
	.long	0
old_actiview:
	.long	0
old_stack:
	.long	0

	
_tag:
		.long	WHDLTAG_MONITOR_GET
monitor:
		.long	0
		.long	WHDLTAG_CHIPREVBITS_GET
chiprevbits:
		.long	0
		.long	WHDLTAG_CUSTOM1_GET
cheat_flags:
		.long	0

		.long	WHDLTAG_CUSTOM2_GET
dsw_options:
		.long	0
		.long	WHDLTAG_CUSTOM3_GET
misc_options:
		.long	0
		
		.long	WHDLTAG_CUSTOM4_GET
		.long	0

		.long	WHDLTAG_CUSTOM5_GET
		.long	0
	.long	0
dip_switches_1:
		.byte	0
dip_switches_0:
		.byte	0

dip_switches_2:
	.byte	0
ntsc_flag:
	.byte 	0
mid_screen_interrupt_count:
	.byte	0
	.align	2
system_vbr:
	.long	0

scroll_y:
	.word	0
scroll_x:
	.word	0

tile_log_table:
	* 64 cluts, 256 tiles
	* a lot of combinations aren't used (fortunately!)
	.skip	NB_CLUTS*NB_TILES


color_copper_pointers:
	.skip	(1<<NB_PLAYFIELD_PLANES)*4

player_1_controls:
	.byte	0
player_2_controls:
	.byte	0
flip_flop:
	.byte	0
bank_value:
	.byte	0
higher_gfxset:
	.byte	0
current_rom_bank:
	.byte	0
	.align	2

host_sprites:
	ds.b	8*SPRITE_SIZEOF
keyboard_table:
	ds.b	0x100

interrupt_mode:
	.word	0
	
pause_flag:
	.word	0
frameskip:
	.word	0
no_main_tune:
	.word	0
tiles_row_flags:
	.skip	0x20
tiles_refresh_table:
	.skip	0x400
	
vbl_counter:
	.word	0
_resload:
	.long	0
_joypad_state:
	.long	0
_previous_joypad_state:
	.long	0
_gfxbase:
	.long	0
_dosbase:
	.long	0
delay_timer:
	.word	0
one_out_of_five:
	.word	0


playfield_screen_data_1:
	.long	0
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
playfield_screen_data_2:
	.long	0
	.endif
	
	

playfield_drawed_screen_ptr:
	.long	0
playfield_displayed_screen_ptr:
	.long	0



	.include	"sound_entries.68k"

_keyexit:
	.byte	0x45	| ESC by default unless whdload overwrites it

	
cheat_used:
	.byte	0
dosname:
	.ascii	"dos.library"
	.byte	0
graphicsname:
	.ascii	"graphics.library"
	.byte	0
floppy_file:
	.ascii	"floppy"
	.byte	0
temp_filename_buffer:
	ds.b	255
_end_of_ng_code:
		
  

	.align 2



palette:
	.include "palette.68k"

	
	* on amiga, this file is included in mpatrol.68k file
	* so the assembler can optimize by using PC-relative addressing
	* whenever possible (and it does)
	.ifndef	RELEASE
	* easier to debug game to have memory aligned on 0x10000
	.align	0x10000

	.ifne	OPT_ENABLE_LOGGING
	.section	.bss
	.ascii	"TILE"
tile_log_table:
	* 32 cluts, 1024 tiles
	* a lot of combinations aren't used (fortunately!)
	ds.w	0x10000
	.endif
	.endif
	.ascii	"CODE_END"


	.section	.datachip


.macro	DECL_32_COLORS
	.set	colidx,0
	.rept	32
	dc.w	color+(colidx*2),0
	.set	colidx,colidx+1
	.endr
	.endm
.macro	DECL_BITPLANES	bpoff_start,nb_planes
	.set	bpoff,\bpoff_start
	.rept	\nb_planes
	dc.w  0xe0+bpoff,0
	dc.w  0xe2+bpoff,0
	.set	bpoff,bpoff+4
	.endr
	.endm
	

	
.macro	DECL_COLORS	offset,nb_colors
	.set	colidx,\offset
	.rept	\nb_colors
	dc.w	color+(colidx*2),0
	.set	colidx,colidx+1
	.endr
	.endm

.macro	DECL_SPRITES
	.set	sprite_start,sprpt+0
	.rept	16
	* 2 slots
	.word	sprite_start,0
	.set	sprite_start,sprite_start+2
    .endr
	.endm

blank_sprite:
	.long	0,0
	
blank_sound:
	ds.l	4
	
debug_copperlist:
	dc.w	bplcon0,0x200
	dc.w	color
debug_color:
	dc.w	0
	dc.l	-2
	

* outside the copperlist for now
sprite_colors:
	DECL_COLORS	16,16

game_sprites:
	DECL_SPRITES
game_sprites_end:

	
	* main copperlist
game_copperlist:
	* all sprites have the same palette no need to specify odd or even
	
	* black color background plane

	* enable sprite colors now
	.word	0x0801,0xFFFE

bobs_bitplanes:
	DECL_BITPLANES	0,NB_PLAYFIELD_PLANES


copperlist_colors:
	.set	bpl_count,0
	.rept	8
	.word	bplcon3,(bpl_count<<13)+(BORDERBLANK<<5)
	.set	bpl_count,bpl_count+1
	DECL_32_COLORS
	.endr



	* mid-line wait & extra interrupt
	.word	0x8001,0xFFFE
pal_intreq_block_game:
	.word	 intreq,0x8014  | call copper interrupt in the middle of a frame, also flag so copper interrupt knows that we're going to call copper int


	*.word	0xF001,0xFFFE	| if we don't add an extra wait, NTSC version locks up
	
	* pal limit
    .word  0xFFDF,0xFFFE       | PAL wait
	* extra wait for PAL (NTSC can't afford this)
pal_wait:
	.word	0x0C01,0xFFFE
	.word	 intreq,0x8010



     .long    -2					
	.ascii	"ENDCPLST"

	* aligning on 8 bytes so .align will work
	* in the next datachip sections
	.align	8
	
		.section .bsschip
		

		
bobs_screen_buffer_1:
	.skip	SCREEN_SIZE
	*.skip	NB_BYTES_PER_ROW*12*3
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
bobs_screen_buffer_2:
	.skip	SCREEN_SIZE
	.skip	NB_BYTES_PER_ROW*12*3
	.endif


		